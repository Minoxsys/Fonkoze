using Core.Persistence;
using Domain;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using Domain.Enums;
using Web.LocalizationResources;
using Web.Services;
using Web.Services.Configuration;
using Web.Services.SendEmail;
using Web.Utils;
using WebBackgrounder;

namespace Web.BackgroundJobs
{
    public class OutpostInactivityJob : IJob
    {
        private readonly PreconfiguredEmailService _preconfiguredEmailService;
        private readonly IConfigurationService _configurationService;
        private readonly Func<IQueryService<OutpostStockLevel>> _queryOutpostStockLevel;
        private readonly ISendSmsService _sendSmsService;
        private readonly ISaveOrUpdateCommand<Alert> _alertSaveOrUpdateCommand;
        private readonly ILogger _logger;

        public OutpostInactivityJob(Func<IQueryService<OutpostStockLevel>> queryOutpostStockLevel,
                                    PreconfiguredEmailService preconfiguredEmailService, IConfigurationService configurationService,
                                    ISendSmsService sendSmsService, ISaveOrUpdateCommand<Alert> alertSaveOrUpdateCommand, ILogger logger)
        {
            _logger = logger;
            _alertSaveOrUpdateCommand = alertSaveOrUpdateCommand;
            _sendSmsService = sendSmsService;
            _queryOutpostStockLevel = queryOutpostStockLevel;
            _configurationService = configurationService;
            _preconfiguredEmailService = preconfiguredEmailService;
        }

        public Task Execute()
        {
            return new Task(() =>
                {
                    try
                    {
                        var inactiveOutposts = SearchForInactiveOutposts();
                        if (inactiveOutposts.Count > 0)
                        {
                            NotifyCentralAccountOfInactiveOutposts(inactiveOutposts);
                            NotifyDistrictManagersForInactiveOutposts(inactiveOutposts);
                            PostAlerts(inactiveOutposts);
                        }
                    }
                    catch (Exception ex)
                    {
                        _logger.LogError(ex, "OutpostInactivity job has failed");
                        throw;
                    }
                });
        }

        private void PostAlerts(IEnumerable<Outpost> inactiveOutposts)
        {
            foreach (Outpost outpost in inactiveOutposts)
            {
                var alert = new Alert
                    {
                        AlertType = AlertType.Inactivity,
                        Client = outpost.Client,
                        OutpostId = outpost.Id,
                        Contact = outpost.DetailMethod,
                        OutpostName = outpost.Name,
                        ProductGroupName = "-",
                        LowLevelStock = "-",
                        LastUpdate = null
                    };
                _alertSaveOrUpdateCommand.Execute(alert);
            }
        }

        private const string JobName = "OutpostInactivityJob";

        public TimeSpan Interval
        {
            //11 hours and 33 minutes
            get { return TimeSpan.FromMinutes(20); }
        }

        public TimeSpan Timeout
        {
            get { return TimeSpan.FromMinutes(19); }
        }

        public string Name
        {
            get { return JobName; }
        }

        private void NotifyCentralAccountOfInactiveOutposts(IEnumerable<Outpost> inactiveOutposts)
        {
            string messageText = BuildMessage(inactiveOutposts);

            var message = _preconfiguredEmailService.CreatePartialMailMessageFromConfig();
            message.Subject = Strings.InactiveSellerDetectedSubject;
            message.Body = string.Format("{1} {0}{0}{2}", Environment.NewLine,
                                         messageText, Strings.AutoGeneratedEmail);

            _preconfiguredEmailService.SendEmail(message);
        }

        private void NotifyDistrictManagersForInactiveOutposts(IEnumerable<Outpost> inactiveOutposts)
        {
            var inactiveOutpostGroupedByDistrict = inactiveOutposts.GroupBy(o => o.District);
            foreach (IGrouping<District, Outpost> grouping in inactiveOutpostGroupedByDistrict)
            {
                var phoneNumber = grouping.Key.DistrictManager != null ? grouping.Key.DistrictManager.PhoneNumber : string.Empty;
                if (!string.IsNullOrEmpty(phoneNumber))
                {
                    _sendSmsService.SendSms(phoneNumber, BuildMessage(grouping), true);
                }
            }
        }

        private string BuildMessage(IEnumerable<Outpost> inactiveOutposts)
        {
            var sb = new StringBuilder(string.Format(Strings.InactiveSellerDetectedBody, GetInactivityPeriod()));
            foreach (var outpost in inactiveOutposts)
            {
                sb.AppendLine(string.Format("{0} - {1}", outpost.Name, outpost.DetailMethod));
            }
            return sb.ToString();
        }

        private int GetInactivityPeriod()
        {
            int period;
            return int.TryParse(_configurationService[_configurationService.Keys.OutpostInactiveTimespan], out period) ? period : 3;
        }

        private List<Outpost> SearchForInactiveOutposts()
        {
            var groups = _queryOutpostStockLevel().Query().GroupBy(o => o.Outpost).Select(g => g).ToList();
            return
                groups.Where(g => !g.Any(o => o.Updated.HasValue && o.Updated.Value >= DateTime.UtcNow.AddDays(-GetInactivityPeriod())))
                      .Select(g => g.Key)
                      .ToList();
        }
    }
}