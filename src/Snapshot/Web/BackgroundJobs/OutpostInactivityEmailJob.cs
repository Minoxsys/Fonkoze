using Core.Persistence;
using Domain;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using Web.LocalizationResources;
using Web.Services.Configuration;
using Web.Services.SendEmail;
using WebBackgrounder;

namespace Web.BackgroundJobs
{
    public class OutpostInactivityEmailJob : IJob
    {
        private readonly PreconfiguredEmailService _preconfiguredEmailService;
        private readonly IConfigurationService _configurationService;
        private readonly Func<IQueryService<OutpostStockLevel>> _queryOutpostStockLevel;

        public OutpostInactivityEmailJob(Func<IQueryService<OutpostStockLevel>> queryOutpostStockLevel,
                                         PreconfiguredEmailService preconfiguredEmailService, IConfigurationService configurationService)
        {
            _queryOutpostStockLevel = queryOutpostStockLevel;
            _configurationService = configurationService;
            _preconfiguredEmailService = preconfiguredEmailService;
        }

        public Task Execute()
        {
            return new Task(() =>
                {
                    var inactiveOutposts = SearchForInactiveOutposts();
                    if (inactiveOutposts.Count > 0)
                    {
                        NotifyCentralAccountOfInactiveOutposts(inactiveOutposts);
                    }
                });
        }

        private const string JobName = "InactivityEmailsJob";

        public TimeSpan Interval
        {
            get { return TimeSpan.FromHours(24); }
        }

        public TimeSpan Timeout
        {
            get { return TimeSpan.FromSeconds(90); }
        }

        public string Name
        {
            get { return JobName; }
        }

        private void NotifyCentralAccountOfInactiveOutposts(IEnumerable<Outpost> inactiveOutposts)
        {
            string messageText = BuildMessage(inactiveOutposts);

            var message = _preconfiguredEmailService.CreatePartialMailMessageFromConfig();
            message.Subject = Strings.InactiveSellerDetectedSubject;
            message.Body = string.Format("{1} {0}{0}{2}", Environment.NewLine,
                                         messageText, Strings.AutoGeneratedEmail);

            _preconfiguredEmailService.SendEmail(message);
        }

        private string BuildMessage(IEnumerable<Outpost> inactiveOutposts)
        {
            var sb = new StringBuilder(string.Format(Strings.InactiveSellerDetectedBody, GetInactivityPeriod()));
            foreach (var outpost in inactiveOutposts)
            {
                sb.AppendLine(string.Format("{0} - {1}", outpost.Name, outpost.DetailMethod));
            }
            return sb.ToString();
        }

        private int GetInactivityPeriod()
        {
            int period;
            return int.TryParse(_configurationService[_configurationService.Keys.OutpostInactiveTimespan], out period) ? period : 3;
        }

        private List<Outpost> SearchForInactiveOutposts()
        {
            var groups = _queryOutpostStockLevel().Query().GroupBy(o => o.Outpost).Select(g => g).ToList();
            return
                groups.Where(g => !g.Any(o => o.Updated.HasValue && o.Updated.Value >= DateTime.UtcNow.AddDays(-GetInactivityPeriod())))
                      .Select(g => g.Key)
                      .ToList();
        }
    }
}