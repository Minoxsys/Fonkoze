@using Domain
@using Microsoft.Web.Mvc;
@using Web.Areas.AnalysisManagement;

@section page_title{
Analysis: Product level information at region level
}

@{
    Html.RenderPartial("_EmptySubNavigation");
    Html.RenderPartial("_AnalysisSideBar");
}
@model Web.Models.Shared.FilterModel

<script type="text/javascript">
    Ext.onReady(function () {
        var dashBtnId = window.res.header.navigation.dashboard;
        var dashBtnId = Ext.getCmp(dashBtnId);
        dashBtnId.toggle(true);

        var reportBtnId = window.res.content.maincontent.sidebar.reportregionlevel;
        var reportBtn = Ext.getCmp(reportBtnId);
        reportBtn.toggle(true);
    });
</script>


<script type="text/javascript">
    Ext.onReady(function () {
        window.feature = {};

        window.feature.comboboxCountriesId = 'comboboxCountriesId';
        window.feature.comboboxRegionsId = 'combobxRegionsId';

        var allOptionGUID = '@Guid.Empty';
       
        window.feature.CountryStore = Ext.create('Ext.data.Store', {
            fields: ['Name', 'Id'],
            proxy: {
                type: 'ajax',
                url: '@Url.RouteUrl(AnalysisManagementAreaRegistration.DEFAULT_ROUTE, new { controller = "ReportRegionLevel", action = "GetCountries" })',
                reader: {
                    type: 'json',
                    root: 'countries',
                    disableCaching: true,
                    totalProperty: 'TotalItems'
                }
            }
        });

        window.feature.RegionStore = Ext.create('Ext.data.Store', {
            fields: ['Name', 'Id'],
            proxy: {
                type: 'ajax',
                url: '@Url.RouteUrl(AnalysisManagementAreaRegistration.DEFAULT_ROUTE, new { controller = "ReportRegionLevel", action = "GetRegions" })',
                reader: {
                    type: 'json',
                    root: 'regions',
                    disableCaching: true,
                    totalProperty: 'TotalItems'
                }
            },
            listeners: {
                datachanged: function () {
                    var regionIdAll = this.data.items[0].data.Id;
                    window.feature.comboBoxRegions.setValue(regionIdAll);
                }
            }
        });

        window.feature.comboBoxCountries = Ext.create('Ext.form.ComboBox', {
            store: window.feature.CountryStore,
            queryMode: 'local',
            id: window.feature.comboboxCountriesId,
            labelAlign: 'top',
            labelClsExtra: 'combo-label',
            fieldLabel: 'Selected Country',
            displayField: 'Name',
            valueField: 'Id',
            emptyText: _t('Country List'),
            listeners: {
                select: function (combo, record, index) {
                    var selectedCountryId = record[0].data.Id;
                    window.feature.comboBoxRegions.setValue(null);
                    window.feature.treegrid.setRootNode(null);
                    window.feature.RegionStore.load({
                        params: { CountryId: selectedCountryId }
                    });
                    window.feature.treegrid.getStore().proxy.extraParams.CountryId = selectedCountryId;
                    window.feature.treegrid.getStore().proxy.extraParams.RegionId = '';
                    window.feature.treegrid.getRootNode().expand();

                    showChart();

                }
            }
        });

        window.feature.comboBoxRegions = Ext.create('Ext.form.ComboBox', {
            store: window.feature.RegionStore,
            queryMode: 'local',
            id: window.feature.comboboxRegionsId,
            labelAlign: 'top',
            labelClsExtra: 'combo-label',
            fieldLabel: 'Selected Region',
            displayField: 'Name',
            valueField: 'Id',
            margin: '0 0 0 20',
            emptyText: _t('Region List'),
            listeners: {
                select: function (combo, record, index) {
                    var selectedRegionId = record[0].data.Id;
                    window.feature.treegrid.setRootNode(null);
                    window.feature.treegrid.getStore().proxy.extraParams.RegionId = selectedRegionId;
                    window.feature.treegrid.getRootNode().expand();

                    showChart();
                }
            }
        });
        Ext.define('ReportRegionLevel', {
            extend: 'Ext.data.Model',
            fields: ['Id', 'Name', 'ProductLevelSum', 'leaf']
        });

        window.feature.treeStore = Ext.create('Ext.data.TreeStore', {
            model: 'ReportRegionLevel',
            autoLoad: false,
            root: {},
            proxy: {
                type: 'ajax',
                url: '@Url.RouteUrl(AnalysisManagementAreaRegistration.DEFAULT_ROUTE, new { controller = "ReportRegionLevel", action = "GetReports" })',
                extraParams: { CountryId: '', RegionId: '' }
            }
        });


       

       @* window.feature.MatrixStore = Ext.create('Ext.data.Store', {
            fields: ['RegionName', 'ProductName', 'StockLevelSum'],
            proxy: {
                type: 'ajax',
                url: '@Url.RouteUrl(AnalysisManagementAreaRegistration.DEFAULT_ROUTE, new { controller = "ReportRegionLevel", action = "GetChartData" })',
                reader: {
                    type: 'json',
                    root: 'Items',
                    totalProperty: 'TotalItems'
                },
                extraParams: { countryId: '',regionId:'' },
                simpleSortMode: true
            }
        });*@

      @*  window.feature.ProductsStore = Ext.create('Ext.data.Store', {
            fields: ['Name', 'Id'],
            proxy: {
                type: 'ajax',
                url: '@Url.RouteUrl(AnalysisManagementAreaRegistration.DEFAULT_ROUTE, new { controller = "ReportRegionLevel", action = "GetProducts" })',
                reader: {
                    type: 'json',
                    root: 'Items',
                    totalProperty: 'TotalItems'
                },
                extraParams: { productGroupId: '' },
                simpleSortMode: true
            }
        });*@

        //-----------------------------------------------
        Ext.regModel("StockLevelForRegions", {
            fields: ['RegionName', 'ProductsUnderTresholdNo', 'Total'],
            hasMany: { model: 'Product', name: 'Products' },
            proxy: {
                type: 'rest',
                url: '@Url.RouteUrl(AnalysisManagementAreaRegistration.DEFAULT_ROUTE, new { controller = "ReportRegionLevel", action = "GetDataForStackedBarChart" })',
                reader: {
                    type: 'json',
                    root: 'Items',
                    totalProperty: 'TotalItems'
                },
                simpleSortMode: true,
                extraParams: { CountryId: '', RegionId: '' }
            }
        });

        Ext.regModel("Product", {
            fields: [
                'ProductName', 'StockLevel', 'LowerLimit'
            ],
            belongsTo: 'StockLevelForRegions'
        });


        window.feature.StockLevelForRegionsStore = Ext.create('Ext.data.Store', {
            remoteSuport: true,
            model: 'StockLevelForRegions',
            sorters: [{
                property: 'ProductsUnderTreshholdNo',
                direction: 'Desc'
            }]
        });


      
        window.feature.execute = new Ext.util.DelayedTask(function () {
                       
            var chartStore = new Ext.data.SimpleStore({
                fields: storeFields
            });

            chartStore.loadData(dataStore);

            var chartContainer = Ext.getCmp('DivChartContainer');
            var charttt = Ext.getCmp('chartIdRemove');
            chartContainer.remove(charttt);
            var lbl = Ext.getCmp('lblNoSales');
            chartContainer.remove(lbl);
            if (chartStore.getCount() == 0) {
                chartContainer.add({ xtype: 'label', id: 'lblNoSales', margin: '40 0 0 10', text: 'There is no data for the selected filter.', cls: 'x-title-label' });
                return;
            }

            chartContainer.add({
                id: 'chartIdRemove',
                xtype: 'chart',
                animate: true,
                shadow: true,
                flex:1,
                style: 'background:#fff',
                store: chartStore,
                axes: [{
                    type: 'Numeric',
                    position: 'left',
                    grid:true,
                    fields: productFields,
                    title: 'Product Stock Level',
                    minimum: 0
                },{
                    type: 'Category',
                    position: 'bottom',
                    fields: ["RegionName"],
                    title: 'Regions'
                } ],
                series: [{
                    type: 'column',
                    axis: 'bottom',
                    highlight: true,
                    tips: {
                        trackMouse: true,
                        width: 140,
                        renderer: function (storeItem, item) {
                            this.setTitle(item.yField+"<br/>" + String('Total Stock level: ' + item.value[1] + ''));
                        }
                    },
                    xField: "RegionName",
                    yField: productFields,
                    stacked:isStacked,
                }],
                legend: {
                    position: 'right'
                }
            });
        });

       

        //function GenerateStoreStructure() {
        //    storeFields = [];
        //    productFields = [];
        //    storeFields.push({ name: 'RegionName' });

        //    window.feature.ProductsStore.each(function (record) {
        //        productFields.push(record.get('Name'));
        //        storeFields.push({ name: record.get('Name'), type: 'int' });
        //    });
        //};

        //function GenerateData() {
        //    dataStore = [];
        //    var fieldNo = window.feature.ProductsStore.count();
        //    var rowNo = window.feature.MatrixStore.count();

        //    window.feature.MatrixStore.load({
        //        params: {
        //            CountryId: Ext.getCmp(window.feature.comboboxCountriesId).getValue(),
        //            RegionId: Ext.getCmp(window.feature.comboboxRegionsId).getValue(),

        //        },
        //        callback: function () {
        //            var prodFieldsLength = productFields.length;
        //            window.feature.StockLevelForOutpostsStore.each(function (outpost) {

                       
        //                var row = new Array(prodFieldsLength + 1);
        //                for (var j = 1; j < row.length; j++) {
        //                    row[j] = 0;
        //                }
        //                row[0] = outpost.get('RegionName');
        //                //row[1] = outpost.get('ProductsUnderTresholdNo');
        //                row[row.length - 1] = outpost.get('Total');
        //                outpost.Products().each(function (product) {

        //                    for (var i = 0; i < prodFieldsLength; i++) {
        //                        if (productFields[i] == product.get('ProductName')) {
        //                            row[i + 2] = product.get('StockLevel');
                                   
        //                            break;
        //                        }
        //                    }
        //                })
        //                dataStore.push(row);
        //            })
        //            window.feature.execute.delay(1000);
        //        }


        //    })

        //    var i = 0;
        //    var row = [];
        //    while (i < rowNo) {
        //        if (i % fieldNo == 0) {
        //            row = [];
        //            row.push(window.feature.MatrixStore.getAt(i).get('RegionName'));
        //        }

        //        var stock = window.feature.MatrixStore.getAt(i).get('StockLevelSum');
        //        row.push(stock);

        //        if (i % fieldNo == 0) {
        //            if (row.length > 0) {
        //                dataStore.push(row);
        //            }
        //        }
        //        i++;
        //    }

        //    return dataStore;
        //};
        var isStacked = true;
        function showChart()
        {
            var regionSelVal = Ext.getCmp(window.feature.comboboxRegionsId).getValue();
            isStacked = true;
            if (regionSelVal != null && regionSelVal != '@Guid.Empty')
            {
                isStacked = false;
            }
            var getFromUrl = '@Url.RouteUrl(AnalysisManagementAreaRegistration.DEFAULT_ROUTE, new { controller = "ReportRegionLevel", action = "GetProductFields" })';

            var action = $.get(getFromUrl,
                    {
                        CountryId: Ext.getCmp(window.feature.comboboxCountriesId).getValue(),
                        RegionId: Ext.getCmp(window.feature.comboboxRegionsId).getValue(),
                    })
            action.success(function (response) {
                if (typeof (response) != "string")//there are no products
                {
                    var chartContainer = Ext.getCmp('DivChartContainer');
                    var lbl = Ext.getCmp('lblNoSales');
                    chartContainer.remove(lbl);
                    var chart2 = Ext.getCmp('chart2DistrictLevel');
                    chartContainer.remove(chart2);

                    chartContainer.add({ xtype: 'label', id: 'lblNoSales', margin: '40 0 0 10', text: 'There is no data for the selected filter.', cls: 'x-title-label' });

                }
                else {
                    productFields = response.split(",");
                    GenerateChartStoreData()
                }

            })
        }

        var productFields = [];
        var storeFields = [];
        var dataStore = [];
        function GenerateChartStoreData()
        {
            storeFields = [];
            dataStore = [];

            storeFields.push({ name: 'RegionName' });
            storeFields.push({ name: 'ProductsUnderTresholdNo', type: 'int' });

            productFields.forEach(function (entry) {
                storeFields.push({ name: entry, type: 'int' })
            })

            //productFields.forEach(function (entry) {
            //    storeFields.push({ name: entry + "_Lower", type: 'int' })
            //})

           // storeFields.push({ name: 'Total', type: 'int' });

            window.feature.StockLevelForRegionsStore.load({
                params: {
                    CountryId: Ext.getCmp(window.feature.comboboxCountriesId).getValue(),
                    RegionId: Ext.getCmp(window.feature.comboboxRegionsId).getValue(),
                    //OnlyUnderTreshold: Ext.getCmp(window.feature.chkOnlyUnderTreshold).getValue()
                },
                callback: function () {
                    var prodFieldsLength = productFields.length;
                    window.feature.StockLevelForRegionsStore.each(function (outpost) {

                        var row = new Array(prodFieldsLength + 2);

                        for (var j = 1; j < row.length; j++) {
                            row[j] = 0;
                        }
                        row[0] = outpost.get('RegionName');
                        row[1] = outpost.get('ProductsUnderTresholdNo');
                        // row[row.length - 1] = outpost.get('Total');
                        outpost.Products().each(function (product) {

                            for (var i = 0; i < prodFieldsLength; i++) {
                                if (productFields[i] == product.get('ProductName')) {
                                    row[i + 2] = product.get('StockLevel');
                                    //row[prodFieldsLength + 2 + i] = product.get('LowerLimit');
                                    break;
                                }
                            }
                        })
                        dataStore.push(row);
                    });

                    window.feature.execute.delay(1000);
                }


            })

        }

        window.feature.treegrid = Ext.create('Ext.tree.Panel', {
            useArrows: true,
            cls: 'white-border',
            rootVisible: false,
            flex: 3,
            scroll: 'vertical',
            root: {},
            store: window.feature.treeStore,
            multiSelect: true,
            autoScroll: true,
            singleExpand: false,
            viewConfig: {
                emptyText: '<div align="center" style="margin-top:75px; font: 17px Lucida Sans Unicode,Arial,Verdana,Geneva,Helvetica,sans-serif; color: #666666;">No data matches the parameters specified.</div>',
            },
            listeners: {
                itemclick: function (view, rec, item, index, eventObj) {
                    if (rec.isLeaf()) {
                        // some functionality to open the leaf(document) in a tabpanel
                    } else if (rec.isExpanded()) {
                        rec.collapse();
                    } else {
                        rec.expand();
                    }
                    //if (!rec.get('leaf') && rec.get('Name').indexOf('Number of Sellers:') == -1) {

                    //    window.feature.ProductsStore.proxy.extraParams.productGroupId = rec.get('Id');
                    //    window.feature.ProductsStore.load();
                    //    window.feature.MatrixStore.proxy.extraParams.productGroupId = rec.get('Id');
                    //    window.feature.MatrixStore.load();

                        //window.feature.execute.delay(500);
                   // }
                }
            },
            columns: [{
                xtype: 'treecolumn',
                text: 'Region / Product Group / Product',
                flex: 2,
                sortable: true,
                menuDisabled: true,
                dataIndex: 'Name'
            }, {
                xtype: 'templatecolumn',
                text: 'Product Level',
                flex: 1,
                sortable: true,
                menuDisabled: true,
                dataIndex: 'ProductLevelSum',
                align: 'center',
                tpl: Ext.create('Ext.XTemplate', '{ProductLevelSum:this.ProductLevelSum}', {
                    ProductLevelSum: function (value) {
                        return value;
                    }
                })
            }]
        });

        window.feature.container = Ext.create('Ext.container.Container', {
            margin: '15 15 15 15',
            padding: '20 0 0 20',
            autoScroll: true,
            id: 'TopContainer',
            layout: {
                align: 'stretch',
                type: 'hbox'
            },
            items: [{
                xtype: 'container',
                flex: 1,
                layout: {
                    align: 'stretch',
                    type: 'vbox'
                },
                items: [{
                    xtype: 'container',
                    layout: {
                        align: 'stretch',
                        type: 'vbox'
                    },
                    height: 110,
                    items: [
                {
                    xtype: 'container',
                    height: 45,
                    layout: {
                        type: 'column'
                    },
                    items: [{
                        xtype: 'label',
                        cls: 'x-title-label',
                        text: 'Product level information at region level'
                    }]
                }, {
                    xtype: 'container',
                    height: 65,
                    layout: {
                        type: 'column'
                    },
                    items: [
                        window.feature.comboBoxCountries,
						window.feature.comboBoxRegions
                    ]
                }]
                }, window.feature.treegrid
                ]
            }, {
                xtype: 'container',
                flex: 2,
                layout: {
                    align: 'stretch',
                    type: 'vbox'
                },
                padding: '0 0 0 20',
                items: [{
                    xtype: 'container',
                    id: 'DivChartContainer',
                    flex: 2,
                    layout: {
                        align: 'stretch',
                        type: 'vbox'
                    },
                    autoScroll: true,
                    items: []
                }]
            }]
        });


        var contentRes = window.res.content;
        var mainContent = Ext.getCmp(contentRes.maincontent.id);

        mainContent.add(window.feature.container);

        window.feature.treegrid.setRootNode(null);

        window.feature.CountryStore.load();
        window.feature.RegionStore.load({
            params: { CountryId: allOptionGUID },
            callback: function () {
                if ('@Model.regionId' != null)
                {
                    window.feature.comboBoxRegions.setValue('@Model.regionId');
                    window.feature.treegrid.getStore().proxy.extraParams.RegionId = window.feature.comboBoxRegions.getValue();
                    window.feature.treegrid.getRootNode().expand();

                }
                showChart();
            }
        });

        window.feature.comboBoxCountries.setValue(allOptionGUID);
        window.feature.comboBoxRegions.setValue(allOptionGUID);

        window.feature.treegrid.getStore().proxy.extraParams.CountryId = allOptionGUID;
       
       
       
        
    });
</script>