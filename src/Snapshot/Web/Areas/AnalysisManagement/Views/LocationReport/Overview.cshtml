@using Domain;
@using Microsoft.Web.Mvc;
@using Web.Areas.AnalysisManagement;

@section page_title{
Analysis: Location Report
}

@{
    Html.RenderPartial("_EmptySubNavigation");
    
    Html.RenderPartial("SelectPositionGoogleMapWindow");
}

<script type="text/javascript">

    Ext.onReady(function () {

        var analysisBtnId = window.res.header.navigation.analysisAndReports;
        var analysisBtn = Ext.getCmp(analysisBtnId);
        analysisBtn.toggle(true);


            //var reportBtnId = window.res.content.maincontent.sidebar.locationreport;
            //var reportBtn = Ext.getCmp(reportBtnId);
            //reportBtn.toggle(true);

    });

</script>

<script type="text/javascript">
    Ext.onReady(function () {
        window.feature = {};
        window.feature.countryComboboxId = "Country-Combo-Box-Google-Map-Report";
        window.feature.regionComboboxId = "Region-Combo-Box-Google-Map-Report";
        window.feature.districtComboboxId = "District-Combo-Box-Google-Map-Report";

        var countryMarkersArray = [];
        var regionMarkersArray = [];
        var districtMarkersArray = [];
        var outpostMarkersArray = [];

        var googleMapPanelConfig = { flex: 1, margin: '0 0 10 0' };
        googleMapPanelConfig.centerPosition = new google.maps.LatLng(34.321061139205526, 66.34764831250004);
        googleMapPanelConfig.zoom = 2;
        var googleMapPanel = Ext.create('Ext.feature.GoogleMapPanel', googleMapPanelConfig);

        window.feature.countryStore = Ext.create('Ext.data.Store', {
            remoteSort: true,
            fields: ['Id', 'Name'],
            proxy: {
                type: 'ajax',
                url: '@Url.RouteUrl(Web.Areas.OutpostManagement.OutpostManagementAreaRegistration.DEFAULT_ROUTE, new { controller = "Region", action = "GetCountries" })',
                reader: {
                    type: 'json',
                    root: 'Countries',
                    totalProperty: 'TotalItems'
                },
                simpleSortMode: true
            },
            sorters: [{
                property: 'Name',
                direction: 'ASC'
            }]
        });

        window.feature.regionStore = Ext.create('Ext.data.Store', {
            remoteSort: true,
            fields: ['Id', 'Name'],
            proxy: {
                type: 'ajax',
                url: '@Url.RouteUrl(Web.Areas.OutpostManagement.OutpostManagementAreaRegistration.DEFAULT_ROUTE, new { controller = "District", action = "GetRegions" })',
                reader: {
                    type: 'json',
                    root: 'regions',
                    totalProperty: 'TotalItems'
                },
                extraParams: { countryId: '' },
                simpleSortMode: true
            },
            sorters: [{
                property: 'Name',
                direction: 'ASC'
            }]
        });

        window.feature.districtStore = Ext.create('Ext.data.Store', {
            remoteSort: true,
            fields: ['Id', 'Name'],
            proxy: {
                type: 'ajax',
                url: '@Url.RouteUrl(Web.Areas.OutpostManagement.OutpostManagementAreaRegistration.DEFAULT_ROUTE, new { controller = "Outpost", action = "GetDistricts" })',
                reader: {
                    type: 'json',
                    root: 'Districts',
                    totalProperty: 'TotalItems'
                },
                extraParams: { regionId: '' },
                simpleSortMode: true
            },
            sorters: [{
                property: 'Name',
                direction: 'ASC'
            }]
        });

        window.feature.countryMarkersStore = Ext.create('Ext.data.Store', {
            fields: ['Id', 'Name', 'Number', 'Coordonates', 'Type', 'InfoWindowContent'],
            proxy: {
                type: 'ajax',
                url: '@Url.RouteUrl(Web.Areas.AnalysisManagement.AnalysisManagementAreaRegistration.DEFAULT_ROUTE, new { controller = "LocationReport", action = "GetCountryMarkers" })',
                reader: {
                    type: 'json',
                    root: 'Markers',
                    totalProperty: 'TotalItems'
                },
                extraParams: { countryId: '' },
                simpleSortMode: true
            }
        });

        window.feature.regionMarkersStore = Ext.create('Ext.data.Store', {
            fields: ['Id', 'Name', 'Number', 'Coordonates', 'Type', 'InfoWindowContent'],
            proxy: {
                type: 'ajax',
                url: '@Url.RouteUrl(Web.Areas.AnalysisManagement.AnalysisManagementAreaRegistration.DEFAULT_ROUTE, new { controller = "LocationReport", action = "GetRegionMarkers" })',
                reader: {
                    type: 'json',
                    root: 'Markers',
                    totalProperty: 'TotalItems'
                },
                extraParams: { countryId: '' },
                simpleSortMode: true
            }
        });

        window.feature.districtMarkersStore = Ext.create('Ext.data.Store', {
            fields: ['Id', 'Name', 'Number', 'Coordonates', 'Type', 'InfoWindowContent'],
            proxy: {
                type: 'ajax',
                url: '@Url.RouteUrl(Web.Areas.AnalysisManagement.AnalysisManagementAreaRegistration.DEFAULT_ROUTE, new { controller = "LocationReport", action = "GetDistrictMarkers" })',
                reader: {
                    type: 'json',
                    root: 'Markers',
                    totalProperty: 'TotalItems'
                },
                extraParams: { countryId: '' },
                simpleSortMode: true
            }
        });

        window.feature.outpostMarkersStore = Ext.create('Ext.data.Store', {
            fields: ['Id', 'Name', 'Number', 'Coordonates', 'Type', 'InfoWindowContent'],
            proxy: {
                type: 'ajax',
                url: '@Url.RouteUrl(Web.Areas.AnalysisManagement.AnalysisManagementAreaRegistration.DEFAULT_ROUTE, new { controller = "LocationReport", action = "GetOutpostMarkers" })',
                reader: {
                    type: 'json',
                    root: 'Markers',
                    totalProperty: 'TotalItems'
                },
                extraParams: { countryId: '' },
                simpleSortMode: true
            }
        });

        function ResetCountryDependencies() {
            var regionCombobox = window.feature.container.down('#' + window.feature.regionComboboxId);
            regionCombobox.setValue(null);

            var districtCombobox = window.feature.container.down('#' + window.feature.districtComboboxId);
            districtCombobox.setValue(null);
        };

        function ResetRegionDependencies() {
            var districtCombobox = window.feature.container.down('#' + window.feature.districtComboboxId);
            districtCombobox.setValue(null);
        };

        //        function ResetDistrictMarkers() {
        //            window.feature.outpostMarkersStore.proxy.extraParams.districtId = '';
        //            window.feature.districtMarkersStore.proxy.extraParams.districtId = '';
        //        }

        //        function ResetRegionMarkers() {
        //            window.feature.outpostMarkersStore.proxy.extraParams.regionId = '';
        //            window.feature.districtMarkersStore.proxy.extraParams.regionId = '';
        //            window.feature.regionMarkersStore.proxy.extraParams.regionId = '';

        //            ResetDistrictMarkers();
        //        }

        //        function ResetCountryMarkers() {
        //            window.feature.outpostMarkersStore.proxy.extraParams.countryId = '';
        //            window.feature.districtMarkersStore.proxy.extraParams.countryId = '';
        //            window.feature.regionMarkersStore.proxy.extraParams.countryId = '';

        //            ResetRegionMarkers();
        //        }

        window.feature.country = Ext.create('Ext.form.ComboBox', {
            xtype: 'combobox',
            itemId: window.feature.countryComboboxId,
            store: window.feature.countryStore,
            margin: '0 0 20 50',
            labelAlign: 'top',
            fieldLabel: 'Select Country',
            displayField: 'Name',
            valueField: 'Id',
            labelClsExtra: 'combo-label',
            emptyText: 'Country List',
            editable: false,
            typeAhead: false,
            listeners: {
                'select': function (combo, record) {
                    ResetCountryDependencies();

                    window.feature.regionStore.proxy.extraParams.countryId = combo.getValue();
                    window.feature.regionStore.load();
                    window.feature.regionMarkersStore.proxy.extraParams.countryId = combo.getValue();
                    window.feature.regionMarkersStore.load();
                    window.feature.districtMarkersStore.proxy.extraParams.countryId = combo.getValue();
                    window.feature.districtMarkersStore.load();
                    window.feature.outpostMarkersStore.proxy.extraParams.countryId = combo.getValue();
                    window.feature.outpostMarkersStore.load();

                    ClearMarkers();

                    window.feature.countryMarkersStore.proxy.extraParams.countryId = combo.getValue();
                    window.feature.countryMarkersStore.load(function () {
                        var map = googleMapPanel.getMap();
                        map.setZoom(4);
                    });

                },
                specialkey: function (field, e) {
                    if (e.getKey() == e.BACKSPACE || e.getKey() == e.DELETE) {
                        field.setValue(null);
                        ResetCountryDependencies();

                        window.feature.outpostMarkersStore.proxy.extraParams.districtId = '';
                        window.feature.outpostMarkersStore.proxy.extraParams.regionId = '';
                        window.feature.outpostMarkersStore.proxy.extraParams.countryId = '';

                        window.feature.districtMarkersStore.proxy.extraParams.districtId = '';
                        window.feature.districtMarkersStore.proxy.extraParams.regionId = '';
                        window.feature.districtMarkersStore.proxy.extraParams.countryId = '';

                        window.feature.regionMarkersStore.proxy.extraParams.countryId = '';
                        window.feature.regionMarkersStore.proxy.extraParams.regionId = '';

                        window.feature.countryMarkersStore.proxy.extraParams.countryId = '';

                        window.feature.outpostMarkersStore.load();
                        window.feature.districtMarkersStore.load();
                        window.feature.regionMarkersStore.load();
                        window.feature.countryMarkersStore.load(function () {
                            var map = googleMapPanel.getMap();
                            map.setZoom(4);
                        });
                    }
                }
            }
        });

        window.feature.region = Ext.create('Ext.form.ComboBox', {
            xtype: 'combobox',
            itemId: window.feature.regionComboboxId,
            store: window.feature.regionStore,
            labelAlign: 'top',
            fieldLabel: 'Select Region',
            displayField: 'Name',
            valueField: 'Id',
            labelClsExtra: 'combo-label',
            emptyText: 'Region List',
            editable: false,
            typeAhead: false,
            listeners: {
                'select': function (combo, record) {
                    ResetRegionDependencies();

                    window.feature.districtStore.proxy.extraParams.regionId = combo.getValue();
                    window.feature.districtStore.load();
                    window.feature.districtMarkersStore.proxy.extraParams.regionId = combo.getValue();
                    window.feature.districtMarkersStore.load();
                    window.feature.outpostMarkersStore.proxy.extraParams.regionId = combo.getValue();
                    window.feature.outpostMarkersStore.load();

                    ClearMarkers();

                    window.feature.regionMarkersStore.proxy.extraParams.regionId = combo.getValue();
                    window.feature.regionMarkersStore.load(function () {
                        var map = googleMapPanel.getMap();
                        map.setZoom(5);
                    });
                },
                specialkey: function (field, e) {
                    if (e.getKey() == e.BACKSPACE || e.getKey() == e.DELETE) {
                        field.setValue(null);
                        ResetRegionDependencies();

                        var map = googleMapPanel.getMap();
                        ClearMarkers();

                        window.feature.outpostMarkersStore.proxy.extraParams.regionId = '';
                        window.feature.outpostMarkersStore.proxy.extraParams.districtId = '';

                        window.feature.districtMarkersStore.proxy.extraParams.regionId = '';
                        window.feature.districtMarkersStore.proxy.extraParams.districtId = '';

                        window.feature.regionMarkersStore.proxy.extraParams.regionId = '';

                        window.feature.outpostMarkersStore.load();
                        window.feature.districtMarkersStore.load();
                        window.feature.regionMarkersStore.load(function () {
                            map.setZoom(5);
                        });
                    }
                }
            }
        });

        window.feature.district = Ext.create('Ext.form.ComboBox', {
            xtype: 'combobox',
            itemId: window.feature.districtComboboxId,
            store: window.feature.districtStore,
            labelAlign: 'top',
            fieldLabel: 'Select District',
            displayField: 'Name',
            valueField: 'Id',
            labelClsExtra: 'combo-label',
            emptyText: 'District List',
            editable: false,
            typeAhead: false,
            listeners: {
                'select': function (combo, record) {

                    window.feature.outpostMarkersStore.proxy.extraParams.districtId = combo.getValue();
                    window.feature.outpostMarkersStore.load();

                    ClearMarkers();

                    window.feature.districtMarkersStore.proxy.extraParams.districtId = combo.getValue();
                    window.feature.districtMarkersStore.load(function () {
                        var map = googleMapPanel.getMap();
                        map.setZoom(6);
                    });

                },
                specialkey: function (field, e) {
                    if (e.getKey() == e.BACKSPACE || e.getKey() == e.DELETE) {
                        field.setValue(null);

                        var map = googleMapPanel.getMap();
                        ClearMarkers();

                        window.feature.outpostMarkersStore.proxy.extraParams.districtId = '';
                        window.feature.districtMarkersStore.proxy.extraParams.districtId = '';

                        window.feature.outpostMarkersStore.load();
                        window.feature.districtMarkersStore.load(function () {
                            map.setZoom(6);
                        });
                    }
                }
            }
        });



        window.feature.container = Ext.create('Ext.container.Container', {
            margin: '15 15 15 15',
            padding: '20 20 0 20',
            autoScroll: true,
            id: 'TopContainer',
            layout: {
                align: 'stretch',
                type: 'hbox'
            },
            items: [{
                xtype: 'container',
                flex: 1,
                layout: {
                    align: 'stretch',
                    type: 'vbox'
                },
                items: [{
                    xtype: 'container',
                    layout: {
                        align: 'stretch',
                        type: 'vbox'
                    },
                    height: 60,
                    items: [{
                        xtype: 'container',
                        flex: 1,
                        layout: {
                            type: 'column'
                        },
                        items: [{
                            xtype: 'label',
                            cls: 'x-title-label',
                            text: 'Location Report'
                        },
                            window.feature.country,
                            window.feature.region,
                            window.feature.district
                        ]
                    }]
                }, {
                    xtype: 'container',
                    flex: 1,
                    layout: {
                        align: 'stretch',
                        type: 'vbox'
                    },
                    items: [
                        googleMapPanel
                    ]
                }]
            }]
        });

        function centerOnPlace(country, map) {
            var geocoder = new google.maps.Geocoder();
            geocoder.geocode({ 'address': country }, function (results, status) {
                if (status == google.maps.GeocoderStatus.OK) {
                    map.setCenter(results[0].geometry.location);
                }
            });
        };

        function getGooglePositionFromText(coordinates) {
            var a = parseFloat(coordinates.substring(1, coordinates.indexOf(',')));
            var b = parseFloat(coordinates.substring(coordinates.indexOf(',') + 1, coordinates.length - 1));
            return new google.maps.LatLng(a, b);
        };

        function createMarker(store, markerArray, map) {
            var a = markerArray.length;

            if (markerArray.length == 0) {
                var i = 0;

                store.each(function (item) {
                    var marker = new MarkerWithLabel({
                        position: getGooglePositionFromText(item.get('Coordonates')),
                        draggable: false,
                        raiseOnDrag: true,
                        map: map,
                        labelContent: item.get('Number'),
                        labelAnchor: new google.maps.Point(15, 0),
                        labelClass: item.get('Type'),
                        title: item.get('Name'),
                        id: item.get('Id'),
                        animation: google.maps.Animation.DROP
                    });
                    var infowindow = new google.maps.InfoWindow({
                        content: "<h3>" + marker.title + "</h3><br/><p>" + item.get('InfoWindowContent') + "</p>"
                    });
                    google.maps.event.addListener(marker, 'mouseover', function () {
                        infowindow.open(map, marker);
                    });

                    google.maps.event.addListener(marker, 'mouseout', function () {
                        infowindow.close(map, marker);
                    });

                    // !!! Implement here the navigate to seller report functionality :

                   @* google.maps.event.addListener(marker, 'click', function () {
                        var countryId = window.feature.container.down('#' + window.feature.countryComboboxId).getValue();
                        var regionId = window.feature.container.down('#' + window.feature.regionComboboxId).getValue();
                        var districtId = window.feature.container.down('#' + window.feature.districtComboboxId).getValue();

                        var map = googleMapPanel.getMap();
                        var zoomLevel = map.getZoom();

                        var link = '@Url.RouteUrl(AnalysisManagementAreaRegistration.DEFAULT_ROUTE, new { controller = "HealthFacilityReport", action = "FromGoogleMap" })';
                        link = link + "?id=" + marker.id;
                        link = link + "&location=" + GetLocation(zoomLevel);
                        link = link + "&type=" + GetType(marker);

                        navigateTo(link);

                     });*@

                    markerArray[i] = marker;
                    i = i + 1;
                }, this);
            }
        }

        function deleteMarkers(markerArray) {
            var number = markerArray.length;

            if (markerArray) {
                for (var j = 0; j < markerArray.length; j++) {
                    markerArray[j].setMap(null);
                }
            }
            markerArray.splice(0, number);
            markerArray = [];

        };


        function ClearMarkers() {
            deleteMarkers(countryMarkersArray);
            deleteMarkers(regionMarkersArray);
            deleteMarkers(districtMarkersArray);
            deleteMarkers(outpostMarkersArray);
        };

        function SetUpZoomEvent() {
            var map = googleMapPanel.getMap();

            google.maps.event.addListener(map, 'zoom_changed', function () {
                var zoomLevel = map.getZoom();

                if (map.getZoom() > 6) {
                    ClearMarkers();
                    createMarker(window.feature.outpostMarkersStore, outpostMarkersArray, map);
                }

                if (map.getZoom() == 6) {
                    ClearMarkers();
                    createMarker(window.feature.districtMarkersStore, districtMarkersArray, map);
                }

                if (map.getZoom() == 5) {
                    ClearMarkers();
                    createMarker(window.feature.regionMarkersStore, regionMarkersArray, map);
                }

                if (map.getZoom() < 5) {
                    ClearMarkers();
                    createMarker(window.feature.countryMarkersStore, countryMarkersArray, map);
                }

                var countryCombobox = window.feature.container.down('#' + window.feature.countryComboboxId);
                centerOnPlace(countryCombobox.getRawValue(), map);
            });
        }

        var contentRes = window.res.content;
        var mainContent = Ext.getCmp(contentRes.id);

        mainContent.add(window.feature.container);
        window.feature.countryMarkersStore.load(function () {
            SetUpZoomEvent();
            var map = googleMapPanel.getMap();
            map.setZoom(2);        
        });
        window.feature.regionMarkersStore.load();
        window.feature.districtMarkersStore.load();
        window.feature.outpostMarkersStore.load();

        window.feature.countryStore.load();

    });

</script>

<style type="text/css">
.goodStock {
   color: black;
   background-color: #98fb98;
   font-family: "Lucida Grande", "Arial", sans-serif;
   font-size: 10px;
   font-weight: bold;
   text-align: center;
   width: 30px;     
   border: 1px solid black;
   white-space: nowrap;
}

.closeToBadStock {
   color: black;
   background-color: #FFD24C; 	
   font-family: "Lucida Grande", "Arial", sans-serif;
   font-size: 10px;
   font-weight: bold;
   text-align: center;
   width: 30px;     
   border: 1px solid black;
   white-space: nowrap;
}

.badStock {
   color: black;
   background-color: #FFCCCC;
   font-family: "Lucida Grande", "Arial", sans-serif;
   font-size: 10px;
   font-weight: bold;
   text-align: center;
   width: 30px;     
   border: 1px solid black;
   white-space: nowrap;
}

.outpost {
   color: black;
   background-color: #FFCCCC;
   font-family: "Lucida Grande", "Arial", sans-serif;
   font-size: 10px;
   font-weight: bold;
   text-align: center;
   width: 30px;     
   border: 1px solid black;
   white-space: nowrap;
}

.warehouse {
   color: black;
   background-color: #99FFFF;
   font-family: "Lucida Grande", "Arial", sans-serif;
   font-size: 10px;
   font-weight: bold;
   text-align: center;
   width: 30px;     
   border: 1px solid black;
   white-space: nowrap;
}
</style>