@using Domain
@using Microsoft.Web.Mvc;
@using Web.Areas.AnalysisManagement;
@using Web.Areas.AnalysisManagement.Controllers;

@section page_title{
Analysis: Product level information at seller level
}

@{
    Html.RenderPartial("_EmptySubNavigation");
    Html.RenderPartial("_AnalysisSideBar");
}


<script type="text/javascript">

    Ext.onReady(function () {

        var analysisBtnId = window.res.header.navigation.analysisAndReports;
        var analysisBtn = Ext.getCmp(analysisBtnId);
        analysisBtn.toggle(true);

        var reportBtnId = window.res.content.maincontent.sidebar.reportsellerlevel;
        var reportBtn = Ext.getCmp(reportBtnId);
        reportBtn.toggle(true);

        //Ext.override(Ext.chart.series.Bar, {
        //    drawSeries: function () {
        //        var me = this,
        //            chart = me.chart,
        //            store = chart.getChartStore(),
        //            surface = chart.surface,
        //            animate = chart.animate,
        //            stacked = me.stacked,
        //            column = me.column,
        //            enableShadows = chart.shadow,
        //            shadowGroups = me.shadowGroups,
        //            shadowGroupsLn = shadowGroups.length,
        //            group = me.group,
        //            seriesStyle = me.seriesStyle,
        //            items, ln, i, j, baseAttrs, sprite, rendererAttributes, shadowIndex, shadowGroup,
        //            bounds, endSeriesStyle, barAttr, attrs, anim;

        //        // ---- start edit ----
        //        var currentCol, currentStoreIndex;
        //        // ---- end edit ----


        //        if (!store || !store.getCount()) {
        //            return;
        //        }

        //        //fill colors are taken from the colors array.
        //        delete seriesStyle.fill;
        //        endSeriesStyle = Ext.apply(seriesStyle, this.style);
        //        me.unHighlightItem();
        //        me.cleanHighlights();

        //        me.getPaths();
        //        bounds = me.bounds;
        //        items = me.items;

        //        baseAttrs = column ? {
        //            y: bounds.zero,
        //            height: 0
        //        } : {
        //            x: bounds.zero,
        //            width: 0
        //        };
        //        ln = items.length;
        //        // Create new or reuse sprites and animate/display
        //        for (i = 0; i < ln; i++) {
        //            sprite = group.getAt(i);
        //            barAttr = items[i].attr;

        //            if (enableShadows) {
        //                items[i].shadows = me.renderShadows(i, barAttr, baseAttrs, bounds);
        //            }

        //            // ---- start edit ----
        //            if (stacked && items[i].storeItem.index != currentStoreIndex) {
        //                //console.log("i: %o, barsLen: %o, j: %o, items[i]: %o",i,bounds.barsLen,i / bounds.barsLen,items[i]);
        //                currentStoreIndex = items[i].storeItem.index;
        //                currentCol = 0;
        //            }
        //            else {
        //                ++currentCol;
        //            }
        //            // ---- end edit ----

        //            // Create a new sprite if needed (no height)
        //            if (!sprite) {
        //                attrs = Ext.apply({}, baseAttrs, barAttr);
        //                attrs = Ext.apply(attrs, endSeriesStyle || {});
        //                sprite = surface.add(Ext.apply({}, {
        //                    type: 'rect',
        //                    group: group
        //                }, attrs));
        //            }
        //            if (animate) {
        //                // ---- start edit ----
        //                rendererAttributes = me.renderer(sprite, items[i].storeItem, barAttr, (stacked ? currentStoreIndex : i), store, (stacked ? currentCol : undefined));
        //                // ---- end edit ----
        //                sprite._to = rendererAttributes;
        //                anim = me.onAnimate(sprite, { to: Ext.apply(rendererAttributes, endSeriesStyle) });
        //                if (enableShadows && stacked && (i % bounds.barsLen === 0)) {
        //                    j = i / bounds.barsLen;
        //                    for (shadowIndex = 0; shadowIndex < shadowGroupsLn; shadowIndex++) {
        //                        anim.on('afteranimate', function () {
        //                            this.show(true);
        //                        }, shadowGroups[shadowIndex].getAt(j));
        //                    }
        //                }
        //            }
        //            else {
        //                // ---- start edit ----
        //                rendererAttributes = me.renderer(sprite, items[i].storeItem, Ext.apply(barAttr, { hidden: false }), (stacked ? currentStoreIndex : i), store, (stacked ? currentCol : undefined));
        //                // ---- end edit ----
        //                sprite.setAttributes(Ext.apply(rendererAttributes, endSeriesStyle), true);
        //            }
        //            items[i].sprite = sprite;
        //        }

        //        // Hide unused sprites
        //        ln = group.getCount();
        //        for (j = i; j < ln; j++) {
        //            group.getAt(j).hide(true);
        //        }
        //        // Hide unused shadows
        //        if (enableShadows) {
        //            for (shadowIndex = 0; shadowIndex < shadowGroupsLn; shadowIndex++) {
        //                shadowGroup = shadowGroups[shadowIndex];
        //                ln = shadowGroup.getCount();
        //                for (j = i; j < ln; j++) {
        //                    shadowGroup.getAt(j).hide(true);
        //                }
        //            }
        //        }
        //        me.renderLabels();
        //    }
        //});
    });

</script>


<script type="text/javascript">
    Ext.onReady(function () {
        window.feature = {};

        window.feature.comboboxCountriesId = 'comboboxCountriesId';
        window.feature.comboboxRegionsId = 'combobxRegionsId';
        window.feature.comboboxDistrictsId = 'comboboxDistrictsId';
        window.feature.comboboxOutpostsId = 'comboboxOutpostId';
        window.feature.chkOnlyUnderTreshold = 'chkOnlyUnderTreshold';
        
        var productFields = [];
        var storeFields = [];
        var dataStore = [];
        var chartSeries = [];
        //var lowerLimits;
        var chartStore;

        window.feature.CountryStore = Ext.create('Ext.data.Store', {
            fields: ['Name', 'Id'],
            proxy: {
                type: 'ajax',
                url: '@Url.RouteUrl(AnalysisManagementAreaRegistration.DEFAULT_ROUTE, new { controller = "ReportRegionLevel", action = "GetCountries" })',
                reader: {
                    type: 'json',
                    root: 'countries',
                    disableCaching: true,
                    totalProperty: 'TotalItems'
                }
            }
        });

        window.feature.RegionStore = Ext.create('Ext.data.Store', {
            fields: ['Name', 'Id'],
            proxy: {
                type: 'ajax',
                url: '@Url.RouteUrl(AnalysisManagementAreaRegistration.DEFAULT_ROUTE, new { controller = "ReportRegionLevel", action = "GetRegions" })',
                reader: {
                    type: 'json',
                    root: 'regions',
                    disableCaching: true,
                    totalProperty: 'TotalItems'
                }
            },
            listeners: {
                datachanged: function () {
                    var regionIdAll = this.data.items[0].data.Id;
                    window.feature.comboBoxRegions.setValue(regionIdAll);
                }
            }
        });

        window.feature.DistrictStore = Ext.create('Ext.data.Store', {
            fields: ['Name', 'Id'],
            proxy: {
                type: 'ajax',
                url: '@Url.RouteUrl(AnalysisManagementAreaRegistration.DEFAULT_ROUTE, new { controller = "ReportDistrictLevel", action = "GetDistricts" })',
                reader: {
                    type: 'json',
                    root: 'districts',
                    disableCaching: true,
                    totalProperty: 'TotalItems'
                }
            },
            listeners: {
                datachanged: function () {
                    var districtIdAll = this.data.items[0].data.Id;
                    window.feature.comboboxDistricts.setValue(districtIdAll);
                }
            }
        });

        window.feature.OutpostStore = Ext.create('Ext.data.Store', {
            fields: ['Name', 'Id'],
            proxy: {
                type: 'ajax',
                url: '@Url.RouteUrl(AnalysisManagementAreaRegistration.DEFAULT_ROUTE, new { controller = "ReportOutpostLevel", action = "GetOutposts" })',
                reader: {
                    type: 'json',
                    root: 'outposts',
                    disableCaching: true,
                    totalProperty: 'TotalItems'
                }
            },
            listeners: {
                datachanged: function () {
                    var outpostIdAll = this.data.items[0].data.Id;
                    window.feature.comboBoxOutposts.setValue(outpostIdAll);
                }
            }
        });

        window.feature.comboBoxCountries = Ext.create('Ext.form.ComboBox', {
            store: window.feature.CountryStore,
            queryMode: 'local',
            id: window.feature.comboboxCountriesId,
            labelAlign: 'top',
            fieldLabel: 'Selected Country',
            labelClsExtra: 'combo-label',
            displayField: 'Name',
            valueField: 'Id',
            emptyText: _t('Country List'),
            listeners: {
                select: function (combo, record, index) {
                    var selectedCountryId = record[0].data.Id;
                    window.feature.comboBoxRegions.setValue(null);
                    window.feature.comboboxDistricts.setValue(null);
                    window.feature.comboBoxOutposts.setValue(null);

                    window.feature.RegionStore.load({
                        params: { CountryId: selectedCountryId }
                    });

                    window.feature.DistrictStore.load({
                        params: { CountryId: selectedCountryId, RegionId: '' }
                    });

                    window.feature.OutpostStore.load({
                        params: { CountryId: selectedCountryId, RegionId: '' }
                    });

                    showChart();
                    
             
                }
            }
        });

        window.feature.comboBoxRegions = Ext.create('Ext.form.ComboBox', {
            store: window.feature.RegionStore,
            queryMode: 'local',
            id: window.feature.comboboxRegionsId,
            labelAlign: 'top',
            fieldLabel: 'Selected Region',
            labelClsExtra: 'combo-label',
            displayField: 'Name',
            valueField: 'Id',
            margin: '0 0 0 20',
            emptyText: _t('Region List'),
            listeners: {
                select: function (combo, record, index) {
                    var selectedRegionId = record[0].data.Id;
                    var selectedCountryId = Ext.getCmp(window.feature.comboboxCountriesId).getValue();
                    window.feature.comboboxDistricts.setValue(null);
                    window.feature.comboBoxOutposts.setValue(null);

                    window.feature.DistrictStore.load({
                        params: { CountryId: selectedCountryId, RegionId: selectedRegionId }
                    });
                    window.feature.OutpostStore.load({
                        params: { CountryId: selectedCountryId, RegionId: selectedRegionId }
                    });
                    showChart();
                }
            }
        });

        window.feature.comboboxDistricts = Ext.create('Ext.form.ComboBox', {
            store: window.feature.DistrictStore,
            queryMode: 'local',
            id: window.feature.comboboxDistrictsId,
            labelAlign: 'top',
            fieldLabel: 'Selected District',
            labelClsExtra: 'combo-label',
            displayField: 'Name',
            valueField: 'Id',
            margin: '0 0 0 20',
            emptyText: _t('District List'),
            listeners: {
                select: function (combo, record, index) {
                    var selectedDistrictId = record[0].data.Id;

                    window.feature.comboBoxOutposts.setValue(null);
                    window.feature.OutpostStore.load({
                        params: { CountryId: selectedCountryId, RegionId: selectedRegionId, DistrictId:selectedDistrictId }
                    });

                    showChart();
                }
            }
        });

        window.feature.comboBoxOutposts = Ext.create('Ext.form.ComboBox', {
            store: window.feature.OutpostStore,
            queryMode: 'local',            
            id: window.feature.comboboxOutpostsId,
            labelClsExtra: 'combo-label',
            labelAlign: 'top',
            fieldLabel: 'Selected Seller',
            displayField: 'Name',
            valueField: 'Id',            
            margin: '0 0 0 20',
            emptyText: _t('Seller List'),
            listeners: {
                select: function (combo, record, index) {
                    var selectedOutpostId = record[0].data.Id;
                    showChart();
                  
                }
            }

        });

        //-----------------------------------------------
        Ext.regModel("StockLevelForOutposts", {
            fields: ['OutpostName','ProductsUnderTresholdNo','Total'],
            hasMany: { model: 'Product', name: 'Products' },
            proxy: {
                type: 'rest',
                url: '@Url.RouteUrl(AnalysisManagementAreaRegistration.DEFAULT_ROUTE, new { controller = "ReportOutpostLevel", action = "GetDataForStackedBarChart" })',
                reader: {
                    type: 'json',
                    root: 'Outposts',
                    totalProperty: 'TotalItems'
                },
                simpleSortMode: true,
                extraParams: { CountryId: '', RegionId: '', DistrictId: '', OutpostId: '' }
            }
        });

        Ext.regModel("Product", {
            fields: [
                'ProductName', 'StockLevel','LowerLimit'
            ],                        
            belongsTo: 'StockLevelForOutposts'
        });


        window.feature.StockLevelForOutpostsStore = Ext.create('Ext.data.Store', {
            remoteSuport: true,
            model:'StockLevelForOutposts',
            sorters: [{
                property: 'ProductsUnderTreshholdNo',
                direction: 'Desc'
            }]
        });

        
       
        function showChart()
        {
            var getFromUrl = '@Url.RouteUrl(AnalysisManagementAreaRegistration.DEFAULT_ROUTE, new { controller = "ReportOutpostLevel", action = "GetProductFields" })';
            
            var action = $.get(getFromUrl,
                    {
                        CountryId: Ext.getCmp(window.feature.comboboxCountriesId).getValue(),
                        RegionId: Ext.getCmp(window.feature.comboboxRegionsId).getValue(),
                        DistrictId: Ext.getCmp(window.feature.comboboxDistrictsId).getValue(),
                        OutpostId: Ext.getCmp(window.feature.comboboxOutpostsId).getValue(),
                        OnlyUnderTreshold: Ext.getCmp(window.feature.chkOnlyUnderTreshold).getValue()
                        
                    })
            action.success(function (response) {
                productFields = response.split(",");
               // lowerLimits = new Array(productFields.length);
                GenerateChartStoreData()
                
            })
        }
        
       
       
        function GenerateChartStoreData() {
            storeFields = [];
            dataStore = [];
            
            storeFields.push({ name: 'OutpostName' });
            storeFields.push({ name: 'ProductsUnderTresholdNo', type: 'int' });

            productFields.forEach(function (entry){
                storeFields.push({name:entry, type: 'int'})
            })
            storeFields.push({ name: 'Total', type: 'int' });
           
            
            window.feature.StockLevelForOutpostsStore.load({
                params: {
                          CountryId: Ext.getCmp(window.feature.comboboxCountriesId).getValue(),
                          RegionId: Ext.getCmp(window.feature.comboboxRegionsId).getValue(),
                          DistrictId: Ext.getCmp(window.feature.comboboxDistrictsId).getValue(),
                          OutpostId: Ext.getCmp(window.feature.comboboxOutpostsId).getValue(),
                          OnlyUnderTreshold: Ext.getCmp(window.feature.chkOnlyUnderTreshold).getValue()
                      },
                callback: function () {
                   
                    window.feature.StockLevelForOutpostsStore.each(function (outpost){
                        
                        var row = new Array(productFields.length + 3);
                        for (var j = 1; j < row.length; j++) {
                            row[j] = 0;
                        }
                        row[0] = outpost.get('OutpostName');
                        row[1] = outpost.get('ProductsUnderTresholdNo');
                        row[row.length - 1] = outpost.get('Total');
                        outpost.Products().each(function (product) {
                          
                            for (var i=0;i<productFields.length;i++)
                            { 
                                if (productFields[i] == product.get('ProductName'))
                                {
                                    row[i + 2] = product.get('StockLevel');
                                    break;
                                }
                            }
                        })
                        dataStore.push(row);
                    })
                       window.feature.execute.delay(1000);
                    }
                   
              
            })
          
        };

        function getMax()
        {
            var maxTotal=0;
            chartStore.each(function (record) {
                var total = record.get('Total');
                if (total > maxTotal)
                    maxTotal = total;
            });

            if (maxTotal == 1)
                maxTotal = 2;

            return maxTotal;

        }
        //-----Build CHART
        window.feature.execute = new Ext.util.DelayedTask(function () {
            
             chartStore = new Ext.data.ArrayStore({
                fields:storeFields
            })
            chartStore.loadData(dataStore);

            var cont = Ext.getCmp('DivChartContainer');
            var chart2 = Ext.getCmp('chart2DistrictLevel');
            cont.remove(chart2);

            cont.add({
                id: 'chart2DistrictLevel',
                xtype: 'chart',
                flex: 6,               
                //minHeight: 650,
                margin: '0 0 0 70',
                // animate: true,
                shadow:false,
                store: chartStore,               
                axes: [{
                    type: 'Numeric',
                    grid: true,
                    position: 'left',
                    fields: productFields,
                    title: 'Product Stock Levels',
                    minimum:0,
                    //maximum: getMax(),
                    //adjustMinimumByMajorUnit: 0,
                                   
                }, {
                    type: 'Category',
                    position: 'bottom',
                    fields: ['OutpostName'],
                    title: 'Sellers',
                    grid:true
                }],
                series: [{
                    type: 'column',
                    highlight: false,
                    axis: 'bottom',                   
                    tips: {
                        trackMouse: true,
                        width: 140,
                        renderer: function (storeItem, item) {
                            this.setTitle(String(item.value[1]) + ' - ' + item.yField);
                        }
                    },
                    xField: 'OutpostName',
                    yField: productFields,
                    stacked: true
                    //renderer: function (sprite, record, attr, storeIndex, store) {
                    //    //barAttr.fill = (storeItem.data.StockLevel <= storeItem.data.LowerLimit ? 'rgb(212, 40, 40)' : 'rgb(154, 205, 50)');
                    //    return attr;
                    //},
                  
                },
                {
                    type: 'line',
                    xField: 'OutpostName',
                    yField: ['Total'],
                    axis: 'left',
                    highlight: true,
                    //markerConfig: {  size: 10 },
                    tips: {
                        trackMouse: true,
                        width: 240,
                        height: 60,
                        renderer: function(storeItem, item) {
                            this.setTitle('Total Stock: ' + storeItem.get('Total') + ' <br/><br/> Products under treshold: ' + storeItem.get('ProductsUnderTresholdNo'));
                        }
                    },
                   
                    label: {
                        display: 'under',
                        field: 'ProductsUnderTresholdNo',
                        renderer: Ext.util.Format.numberRenderer('0'),
                        orientation: 'horizontal',
                        color: '#333',
                        'text-anchor': 'middle'
                    },
                    selectionTolerance: 4,
                    
                }
                ],
                legend: {
                    position: 'right'
                }
            });
        });
   
        
        //----MAIN CONTENT-----
        window.feature.container = Ext.create('Ext.container.Container', {
            margin: '15 15 15 15',
            padding: '20 0 0 20',
            autoScroll: true,
            id: 'TopContainer',
            layout: {
                align: 'stretch',
                type: 'vbox'
            },
            items: [{
                xtype: 'container',
                flex:1,
                layout: {
                    align: 'stretch',
                    type: 'vbox'
                },
                items: [{
                    xtype: 'container',
                    layout: {
                        align: 'stretch',
                        type: 'vbox'
                    },
                    height: 100,
                    items: [
                      {
                          xtype: 'container',
                          height: 45,
                          layout: {
                              type: 'column'
                          },
                          items: [{
                              xtype: 'label',
                              cls: 'x-title-label',
                              text: 'Product level information at seller level'
                          },
                          {
                              xtype: 'button',
                              margin: '0 10 0 20',
                              ui: 'snapshot-add-btn',
                              cls: 'x-add-button-gradient',
                              text: 'Back',
                              handler: function () {
                                  navigateTo('@(Url.RouteUrl<ReportOutpostLevelController>(x=>x.Overview(),AnalysisManagementAreaRegistration.DEFAULT_ROUTE))')
                              }
                          }
                          ]
                      }, {
                          xtype: 'container',
                          height: 55,
                          layout: {
                              type: 'column'
                          },
                          items: [
                                  window.feature.comboBoxCountries,
                                  window.feature.comboBoxRegions,
                                  window.feature.comboboxDistricts,
                                  window.feature.comboBoxOutposts,
                                 {
                                     xtype: 'checkbox',
                                     id: window.feature.chkOnlyUnderTreshold,
                                     boxLabel: '<b>Show products under treshold only</b>',
                                     margin: '30 0 0 10',
                                     listeners: {
                                         change: function (chk, checked) {
                                             showChart();
                                         }
                                     }
                                 }
                          ]
                      }]
                }
                ]
            }, {
                xtype: 'container',              
                layout:'fit',
                padding: '0 0 0 0',
                flex:5,
                items: [{
                    xtype: 'container',
                    id: 'DivChartContainer',
                    layout: {
                        align: 'stretch',
                        type: 'vbox'
                    },
                    autoScroll: true,
                    scrollable: true,
                    items: []
                }]
            }]
        });

        var contentRes = window.res.content;
        var mainContent = Ext.getCmp(contentRes.maincontent.id);

        mainContent.add(window.feature.container);
        window.feature.CountryStore.load();



    });

    </script>

<style>
    .alignBottom {
    padding-top:20px;
    }

</style>