@using Domain
@using Microsoft.Web.Mvc;
@using Web.Areas.AnalysisManagement;
@using Web.Areas.AnalysisManagement.Controllers;

@section page_title{
Analysis: Product level information at seller level
}

@{
    Html.RenderPartial("_EmptySubNavigation");
    Html.RenderPartial("_AnalysisSideBar");
}

@model Web.Models.Shared.FilterModel

<script type="text/javascript">

    Ext.onReady(function () {

        var dashBtnId = window.res.header.navigation.dashboard;
        var dashBtnId = Ext.getCmp(dashBtnId);
        dashBtnId.toggle(true);

        var reportBtnId = window.res.content.maincontent.sidebar.sellerOverview;
        var reportBtn = Ext.getCmp(reportBtnId);
        reportBtn.toggle(true);

       
    });

</script>


<script type="text/javascript">
    Ext.onReady(function () {
        window.feature = {};

        window.feature.comboboxCountriesId = 'comboboxCountriesId';
        window.feature.comboboxRegionsId = 'combobxRegionsId';
        window.feature.comboboxDistrictsId = 'comboboxDistrictsId';
        window.feature.comboboxOutpostsId = 'comboboxOutpostId';
        window.feature.chkOnlyUnderTreshold = 'chkOnlyUnderTreshold';
        
        var productFields = [];
        var storeFields = [];
        var dataStore = [];
        var chartSeries = [];
        //var lowerLimits;
        var chartStore;

        window.feature.CountryStore = Ext.create('Ext.data.Store', {
            fields: ['Name', 'Id'],
            proxy: {
                type: 'ajax',
                url: '@Url.RouteUrl(AnalysisManagementAreaRegistration.DEFAULT_ROUTE, new { controller = "ReportRegionLevel", action = "GetCountries" })',
                reader: {
                    type: 'json',
                    root: 'countries',
                    disableCaching: true,
                    totalProperty: 'TotalItems'
                }
            }
        });

        window.feature.RegionStore = Ext.create('Ext.data.Store', {
            fields: ['Name', 'Id'],
            proxy: {
                type: 'ajax',
                url: '@Url.RouteUrl(AnalysisManagementAreaRegistration.DEFAULT_ROUTE, new { controller = "ReportRegionLevel", action = "GetRegions" })',
                reader: {
                    type: 'json',
                    root: 'regions',
                    disableCaching: true,
                    totalProperty: 'TotalItems'
                }
            },
            listeners: {
                datachanged: function () {
                    var regionIdAll = this.data.items[0].data.Id;
                    window.feature.comboBoxRegions.setValue(regionIdAll);
                }
            }
        });

        window.feature.DistrictStore = Ext.create('Ext.data.Store', {
            fields: ['Name', 'Id'],
            proxy: {
                type: 'ajax',
                url: '@Url.RouteUrl(AnalysisManagementAreaRegistration.DEFAULT_ROUTE, new { controller = "ReportDistrictLevel", action = "GetDistricts" })',
                reader: {
                    type: 'json',
                    root: 'districts',
                    disableCaching: true,
                    totalProperty: 'TotalItems'
                }
            },
            listeners: {
                datachanged: function () {
                    var districtIdAll = this.data.items[0].data.Id;
                    window.feature.comboBoxDistricts.setValue(districtIdAll);
                }
            }
        });

        window.feature.OutpostStore = Ext.create('Ext.data.Store', {
            fields: ['Name', 'Id'],
            proxy: {
                type: 'ajax',
                url: '@Url.RouteUrl(AnalysisManagementAreaRegistration.DEFAULT_ROUTE, new { controller = "ReportOutpostLevel", action = "GetOutposts" })',
                reader: {
                    type: 'json',
                    root: 'outposts',
                    disableCaching: true,
                    totalProperty: 'TotalItems'
                }
            },
            listeners: {
                datachanged: function () {
                    var outpostIdAll = this.data.items[0].data.Id;
                    window.feature.comboBoxOutposts.setValue(outpostIdAll);
                }
            }
        });

        window.feature.comboBoxCountries = Ext.create('Ext.form.ComboBox', {
            store: window.feature.CountryStore,
            queryMode: 'local',
            id: window.feature.comboboxCountriesId,
            labelAlign: 'top',
            fieldLabel: 'Selected Country',
            labelClsExtra: 'combo-label',
            displayField: 'Name',
            valueField: 'Id',
            emptyText: _t('Country List'),
            listeners: {
                select: function (combo, record, index) {
                    var selectedCountryId = record[0].data.Id;
                    window.feature.comboBoxRegions.setValue(null);
                    window.feature.comboBoxDistricts.setValue(null);
                    window.feature.comboBoxOutposts.setValue(null);

                    window.feature.RegionStore.load({
                        params: { CountryId: selectedCountryId }
                    });

                    window.feature.DistrictStore.load({
                        params: { CountryId: selectedCountryId, RegionId: '' }
                    });

                    window.feature.OutpostStore.load({
                        params: { CountryId: selectedCountryId, RegionId: '' }
                    });

                    showChart();
                    
             
                }
            }
        });

        window.feature.comboBoxRegions = Ext.create('Ext.form.ComboBox', {
            store: window.feature.RegionStore,
            queryMode: 'local',
            id: window.feature.comboboxRegionsId,
            labelAlign: 'top',
            fieldLabel: 'Selected Region',
            labelClsExtra: 'combo-label',
            displayField: 'Name',
            valueField: 'Id',
            margin: '0 0 0 20',
            emptyText: _t('Region List'),
            listeners: {
                select: function (combo, record, index) {
                    var selectedRegionId = record[0].data.Id;
                    var selectedCountryId = Ext.getCmp(window.feature.comboboxCountriesId).getValue();
                    window.feature.comboBoxDistricts.setValue(null);
                    window.feature.comboBoxOutposts.setValue(null);

                    window.feature.DistrictStore.load({
                        params: { CountryId: selectedCountryId, RegionId: selectedRegionId }
                    });
                    window.feature.OutpostStore.load({
                        params: { CountryId: selectedCountryId, RegionId: selectedRegionId }
                    });
                    showChart();
                }
            }
        });

        window.feature.comboBoxDistricts = Ext.create('Ext.form.ComboBox', {
            store: window.feature.DistrictStore,
            queryMode: 'local',
            id: window.feature.comboboxDistrictsId,
            labelAlign: 'top',
            fieldLabel: 'Selected District',
            labelClsExtra: 'combo-label',
            displayField: 'Name',
            valueField: 'Id',
            margin: '0 0 0 20',
            emptyText: _t('District List'),
            listeners: {
                select: function (combo, record, index) {
                    var selectedDistrictId = record[0].data.Id;
                    var selectedCountryId = Ext.getCmp(window.feature.comboboxCountriesId).getValue();
                    var selectedRegionId = Ext.getCmp(window.feature.comboboxRegionsId).getValue();

                    window.feature.comboBoxOutposts.setValue(null);
                    window.feature.OutpostStore.load({
                        params: { CountryId: selectedCountryId, RegionId: selectedRegionId, DistrictId:selectedDistrictId }
                    });

                    showChart();
                }
            }
        });

        window.feature.comboBoxOutposts = Ext.create('Ext.form.ComboBox', {
            store: window.feature.OutpostStore,
            queryMode: 'local',            
            id: window.feature.comboboxOutpostsId,
            labelClsExtra: 'combo-label',
            labelAlign: 'top',
            fieldLabel: 'Selected Seller',
            displayField: 'Name',
            valueField: 'Id',            
            margin: '0 0 0 20',
            emptyText: _t('Seller List'),
            listeners: {
                select: function (combo, record, index) {
                    var selectedOutpostId = record[0].data.Id;
                    showChart();
                  
                }
            }

        });

        //-----------------------------------------------
        Ext.regModel("StockLevelForOutposts", {
            fields: ['OutpostName','ProductsUnderTresholdNo','Total'],
            hasMany: { model: 'Product', name: 'Products' },
            proxy: {
                type: 'rest',
                url: '@Url.RouteUrl(AnalysisManagementAreaRegistration.DEFAULT_ROUTE, new { controller = "ReportOutpostLevel", action = "GetDataForStackedBarChart" })',
                reader: {
                    type: 'json',
                    root: 'Outposts',
                    totalProperty: 'TotalItems'
                },
                simpleSortMode: true,
                extraParams: { CountryId: '', RegionId: '', DistrictId: '', OutpostId: '' }
            }
        });

        Ext.regModel("Product", {
            fields: [
                'ProductName', 'StockLevel','LowerLimit'
            ],                        
            belongsTo: 'StockLevelForOutposts'
        });


        window.feature.StockLevelForOutpostsStore = Ext.create('Ext.data.Store', {
            remoteSuport: true,
            model:'StockLevelForOutposts',
            sorters: [{
                property: 'ProductsUnderTreshholdNo',
                direction: 'Desc'
            }]
        });

        
       
        function showChart()
        {
            var getFromUrl = '@Url.RouteUrl(AnalysisManagementAreaRegistration.DEFAULT_ROUTE, new { controller = "ReportOutpostLevel", action = "GetProductFields" })';
            
            var action = $.get(getFromUrl,
                    {
                        CountryId: Ext.getCmp(window.feature.comboboxCountriesId).getValue(),
                        RegionId: Ext.getCmp(window.feature.comboboxRegionsId).getValue(),
                        DistrictId: Ext.getCmp(window.feature.comboboxDistrictsId).getValue(),
                        OutpostId: Ext.getCmp(window.feature.comboboxOutpostsId).getValue(),
                        OnlyUnderTreshold: Ext.getCmp(window.feature.chkOnlyUnderTreshold).getValue()
                        
                    })
            action.success(function (response) {
                if (typeof (response) != "string")//there are no products
                {
                    var chartContainer = Ext.getCmp('DivChartContainer');
                    var lbl = Ext.getCmp('lblNoSales');
                    chartContainer.remove(lbl);
                    var chart2 = Ext.getCmp('chart2DistrictLevel');
                    chartContainer.remove(chart2);
                                       
                    chartContainer.add({ xtype: 'label', id: 'lblNoSales', margin: '40 0 0 10', text: 'There is no data for the selected filter.', cls: 'x-title-label' });
                       
                }
                else
                {
                    productFields = response.split(",");
                    // lowerLimits = new Array(productFields.length);
                    GenerateChartStoreData()
                }
                
            })
        }
        
       
       
        function GenerateChartStoreData() {
            storeFields = [];
            dataStore = [];
            
            storeFields.push({ name: 'OutpostName' });
            storeFields.push({ name: 'ProductsUnderTresholdNo', type: 'int' });

            productFields.forEach(function (entry){
                storeFields.push({name:entry, type: 'int'})
            })

            productFields.forEach(function (entry) {
                storeFields.push({ name: entry+"_Lower", type: 'int' })
            })
            
            storeFields.push({ name: 'Total', type: 'int' });
            
            window.feature.StockLevelForOutpostsStore.load({
                params: {
                          CountryId: Ext.getCmp(window.feature.comboboxCountriesId).getValue(),
                          RegionId: Ext.getCmp(window.feature.comboboxRegionsId).getValue(),
                          DistrictId: Ext.getCmp(window.feature.comboboxDistrictsId).getValue(),
                          OutpostId: Ext.getCmp(window.feature.comboboxOutpostsId).getValue(),
                          OnlyUnderTreshold: Ext.getCmp(window.feature.chkOnlyUnderTreshold).getValue()
                      },
                callback: function () {
                    var prodFieldsLength = productFields.length;
                    window.feature.StockLevelForOutpostsStore.each(function (outpost){
                        
                        var row = new Array(prodFieldsLength * 2 + 3);
                        //var row = new Array(prodFieldsLength + 3);
                        for (var j = 1; j < row.length; j++) {
                            row[j] = 0;
                        }
                        row[0] = outpost.get('OutpostName');
                        row[1] = outpost.get('ProductsUnderTresholdNo');
                        row[row.length - 1] = outpost.get('Total');
                        outpost.Products().each(function (product) {
                          
                            for (var i = 0; i < prodFieldsLength; i++)
                            { 
                                if (productFields[i] == product.get('ProductName'))
                                {
                                    row[i + 2] = product.get('StockLevel');
                                    row[prodFieldsLength + 2 + i] = product.get('LowerLimit');
                                    break;
                                }
                            }
                        })
                        dataStore.push(row);
                    })
                       window.feature.execute.delay(1000);
                    }
                   
              
            })
          
        };

        function getMaxProdsUnderTreshold()
        {
            var maxTotal=0;
            chartStore.each(function (record) {
                var total = record.get('ProductsUnderTresholdNo');
                if (total > maxTotal)
                    maxTotal = total;
            });

            return maxTotal;

        }
        var countHolder = 0;
        var storeIndexHolder = 0;
        var recordHolder;
        function getColorForBar(record,resetCountHolder,storeIndex,store)
        {
            //Are the bars loaded in order or async?
            if (storeIndexHolder == 0)
                recordHolder = record;
            if (resetCountHolder == true) {
                countHolder = 0;
                recordHolder = record;//record becomes null at some point for no reason
            }
            var prodName = productFields[countHolder];
            countHolder++;
           // if (recordHolder == null) return '';
            if (recordHolder.get(prodName) <= recordHolder.get(prodName + "_Lower"))
            {
                return 'rgb(212, 40, 40)';
            }
            return 'rgb(154, 205, 50)';
        }
        //-----Build CHART
        window.feature.execute = new Ext.util.DelayedTask(function () {
            
             chartStore = new Ext.data.ArrayStore({
                fields:storeFields
            })
            chartStore.loadData(dataStore);

            var chartContainer = Ext.getCmp('DivChartContainer');
            var chart2 = Ext.getCmp('chart2DistrictLevel');
            chartContainer.remove(chart2);
            var lbl = Ext.getCmp('lblNoSales');
            chartContainer.remove(lbl);

            if (chartStore.getCount() == 0) {
                chartContainer.add({ xtype: 'label', id: 'lblNoSales', margin: '40 0 0 10', text: 'There is no data for the selected filter.', cls: 'x-title-label' });
                return;
            }
           
            chartContainer.add({
                id: 'chart2DistrictLevel',
                xtype: 'chart',
                flex: 1,
                insetPadding:45,
                maxWidth:chartStore.getCount()*700,
                margin: '0 0 0 20',
                animate: true,                
                shadow:true,
                store: chartStore,               
                axes: [{
                    type: 'Numeric',
                    grid: true,
                    position: 'left',
                    fields: productFields,
                    title: 'Product Stock Levels (bars)',
                    minimum:0,
                },
                {
                type: 'Numeric',
                position: 'right',
                fields: ['ProductsUnderTresholdNo'],
                title: 'Products Under Threshold',
                minimum: 0,
                maximum: getMaxProdsUnderTreshold(),
                majorTickSteps: getMaxProdsUnderTreshold() - 1,
                }
                , {
                    type: 'Category',
                    position: 'bottom',
                    fields: ['OutpostName'],
                    title: 'Sellers',
                    grid:true
                }],
                series: [{
                    type: 'column',
                    highlight: false,
                    axis: 'bottom',
                    width:40,
                    tips: {
                        trackMouse: true,
                        width: 140,
                        renderer: function (storeItem, item) {
                            this.setTitle(item.yField +"<br/>"+"Stock level: "+String(item.value[1]) + "<br/>" + "Minimum Limit: "+storeItem.get(item.yField + "_Lower"));
                        }
                    },
                    xField: 'OutpostName',
                    yField: productFields,
                    stacked: true,
                    renderer: function (sprite, record, attr, storeIndex, store) {
                        //if (storeIndex > store.getCount())
                        //    return attr;
                       // attr.fill = getColorForBar(record, (storeIndexHolder != storeIndex),storeIndex,store);
                            //(storeItem.data.StockLevel <= storeItem.data.LowerLimit ? 'rgb(212, 40, 40)' : 'rgb(154, 205, 50)');
                        //if (storeIndexHolder != storeIndex)
                        //    storeIndexHolder = storeIndex;
                        return attr;
                    },
                  
                },
                {
                    type: 'line',
                    xField: 'OutpostName',
                    yField: ['ProductsUnderTresholdNo'],
                    title:'UnderThreshold',
                    axis: 'right',
                    highlight: true,
                    tips: {
                        trackMouse: true,
                        width: 180,
                        height: 27,
                        renderer: function(storeItem, item) {
                            this.setTitle('Products under threshold: ' + storeItem.get('ProductsUnderTresholdNo'));
                        }
                    },
                   
                    //label: {
                    //    display: 'over',
                    //    field: 'ProductsUnderTresholdNo',
                    //    renderer: Ext.util.Format.numberRenderer('0 under threshold'),
                    //    orientation: 'horizontal',
                    //    'text-anchor':'middle',
                    //    font: '14px Helvetica, sans-serif'
                       
                    //},
                    selectionTolerance: 4,
                    
                }
                ],
                legend: {
                    position: 'right'
                }
            });
        });
   
        
        //----MAIN CONTENT-----
        window.feature.container = Ext.create('Ext.container.Container', {
            margin: '15 15 15 15',
            padding: '20 0 0 20',
            autoScroll: true,
            id: 'TopContainer',
            layout: {
                align: 'stretch',
                type: 'vbox'
            },
            items: [{
                xtype: 'container',
                flex:1,
                layout: {
                    align: 'stretch',
                    type: 'vbox'
                },
                items: [{
                    xtype: 'container',
                    layout: {
                        align: 'stretch',
                        type: 'vbox'
                    },
                    height: 100,
                    items: [
                      {
                          xtype: 'container',
                          height: 45,
                          layout: {
                              type: 'column'
                          },
                          items: [{
                              xtype: 'label',
                              cls: 'x-title-label',
                              text: 'Product level information at seller level'
                          },
                          {
                              xtype: 'button',
                              margin: '0 10 0 20',
                              ui: 'snapshot-add-btn',
                              cls: 'x-add-button-gradient',
                              text: 'Tree View',
                              handler: function () {
                                  var url = '@(Url.RouteUrl<ReportOutpostLevelController>(x=>x.Overview(null),AnalysisManagementAreaRegistration.DEFAULT_ROUTE))';
                                  url = url + "/?countryId=" + window.feature.comboBoxCountries.getValue() + "&regionId=" + window.feature.comboBoxRegions.getValue() + "&districtId=" + window.feature.comboBoxDistricts.getValue();
                                  url += "&outpostId=" + window.feature.comboBoxOutposts.getValue();
                                  navigateTo(url);
                              }
                          }
                          ]
                      }, {
                          xtype: 'container',
                          height: 55,
                          layout: {
                              type: 'column'
                          },
                          items: [
                                  window.feature.comboBoxCountries,
                                  window.feature.comboBoxRegions,
                                  window.feature.comboBoxDistricts,
                                  window.feature.comboBoxOutposts,
                                 {
                                     xtype: 'checkbox',
                                     id: window.feature.chkOnlyUnderTreshold,
                                     boxLabel: '<b>Show products under threshold only</b>',
                                     margin: '30 0 0 10',
                                     listeners: {
                                         change: function (chk, checked) {
                                             showChart();
                                         }
                                     }
                                 }
                          ]
                      }]
                }
                ]
            }, {
                xtype: 'container',              
                layout:'fit',
                padding: '0 0 0 0',
                flex:4.5,
                items: [{
                    xtype: 'container',
                    id: 'DivChartContainer',
                    layout: {
                        align: 'stretch',
                        type: 'vbox'
                    },
                    autoScroll: true,
                    scrollable: true,
                    items: []
                }]
            }]
        });

        var contentRes = window.res.content;
        var mainContent = Ext.getCmp(contentRes.maincontent.id);

        mainContent.add(window.feature.container);

        window.feature.CountryStore.load({
            callback: function () {
                if ('@Model.countryId'!=null)
                    window.feature.comboBoxCountries.setValue('@Model.countryId');
            }
        });

        window.feature.OutpostStore.load({
            callback: function () {
                if ('@Model.outpostId' != null) {
                    window.feature.comboBoxOutposts.setValue('@Model.outpostId');
                 }
            }
        });

        window.feature.RegionStore.load({
                params: { countryId: '@Model.countryId' },
                callback: function () {
                    window.feature.comboBoxRegions.setValue('@Model.regionId');
                }
        });

        window.feature.DistrictStore.load({
            params: { regionId: '@Model.regionId' },
            callback: function () {
                window.feature.comboBoxDistricts.setValue('@Model.districtId');
            }
        });

        showChart();


    });

    </script>

