@using Domain
@using Microsoft.Web.Mvc;
@using Web.Areas.AnalysisManagement;
@using Web.Areas.AnalysisManagement.Controllers;

@section page_title{
Analysis: Product level information at seller level
}

@{
    Html.RenderPartial("_EmptySubNavigation");
    Html.RenderPartial("_AnalysisSideBar");
}
@model Web.Models.Shared.NotNullableFilterModel

<script type="text/javascript">

    Ext.onReady(function () {

        var dashBtnId = window.res.header.navigation.dashboard;
        var dashBtnId = Ext.getCmp(dashBtnId);
        dashBtnId.toggle(true);

        var reportBtnId = window.res.content.maincontent.sidebar.reportsellerlevel;
        var reportBtn = Ext.getCmp(reportBtnId);
        reportBtn.toggle(true);
    });

</script>


<script type="text/javascript">
    Ext.onReady(function () {
        window.feature = {};

        window.feature.comboboxCountriesId = 'comboboxCountriesId';
        window.feature.comboboxRegionsId = 'combobxRegionsId';
        window.feature.comboboxDistrictsId = 'comboboxDistrictsId';
        window.feature.comboboxOutpostsId = 'comboboxOutpostId';
        window.feature.chkOnlyUnderTreshold = 'chkOnlyUnderTreshold';

        var allOptionGUID = '@Guid.Parse("00000000-0000-0000-0000-000000000000")';
     
        window.feature.CountryStore = Ext.create('Ext.data.Store', {
            fields: ['Name', 'Id'],
            proxy: {
                type: 'ajax',
                url: '@Url.RouteUrl(AnalysisManagementAreaRegistration.DEFAULT_ROUTE, new { controller = "ReportRegionLevel", action = "GetCountries" })',
                reader: {
                    type: 'json',
                    root: 'countries',
                    disableCaching: true,
                    totalProperty: 'TotalItems'
                }
            }
        });

        window.feature.RegionStore = Ext.create('Ext.data.Store', {
            fields: ['Name', 'Id'],
            proxy: {
                type: 'ajax',
                url: '@Url.RouteUrl(AnalysisManagementAreaRegistration.DEFAULT_ROUTE, new { controller = "ReportRegionLevel", action = "GetRegions" })',
                reader: {
                    type: 'json',
                    root: 'regions',
                    disableCaching: true,
                    totalProperty: 'TotalItems'
                },
                extraParams: { CountryId: ''}
            },
            listeners: {
                datachanged: function () {
                    var regionIdAll = this.data.items[0].data.Id;
                    window.feature.comboBoxRegions.setValue(regionIdAll);
                }
            }
        });

        window.feature.DistrictStore = Ext.create('Ext.data.Store', {
            fields: ['Name', 'Id'],
            proxy: {
                type: 'ajax',
                url: '@Url.RouteUrl(AnalysisManagementAreaRegistration.DEFAULT_ROUTE, new { controller = "ReportDistrictLevel", action = "GetDistricts" })',
                reader: {
                    type: 'json',
                    root: 'districts',
                    disableCaching: true,
                    totalProperty: 'TotalItems'
                },
                extraParams: { CountryId: '', RegionId: '' }
            },
            listeners: {
                datachanged: function () {
                    var districtIdAll = this.data.items[0].data.Id;
                    window.feature.comboBoxDistricts.setValue(districtIdAll);
                }
            }
        });

        window.feature.OutpostStore = Ext.create('Ext.data.Store', {
            fields: ['Name', 'Id'],
            proxy: {
                type: 'ajax',
                url: '@Url.RouteUrl(AnalysisManagementAreaRegistration.DEFAULT_ROUTE, new { controller = "ReportOutpostLevel", action = "GetOutposts" })',
                reader: {
                    type: 'json',
                    root: 'outposts',
                    disableCaching: true,
                    totalProperty: 'TotalItems'
                },
                extraParams: { CountryId: '', RegionId: '', DistrictId: ''}
            },
            listeners: {
                datachanged: function () {
                    var outpostIdAll = this.data.items[0].data.Id;
                    window.feature.comboBoxOutposts.setValue(outpostIdAll);
                }
            }
         });

        window.feature.comboBoxCountries = Ext.create('Ext.form.ComboBox', {
            store: window.feature.CountryStore,
            queryMode: 'local',
            id: window.feature.comboboxCountriesId,
            labelAlign: 'top',
            fieldLabel: 'Selected Country',
            labelClsExtra: 'combo-label',
            displayField: 'Name',
            valueField: 'Id',
            emptyText: _t('Country List'),
            columnWidth: 0.25,
            listeners: {
                select: function (combo, record, index) {
                    var selectedCountryId = record[0].data.Id;

                    window.feature.treegrid.getStore().proxy.extraParams.CountryId = '';
                    window.feature.treegrid.getStore().proxy.extraParams.RegionId = '';
                    window.feature.treegrid.getStore().proxy.extraParams.DistrictId = '';

                    window.feature.treegrid.setRootNode(null);
                    window.feature.RegionStore.load({
                        params: { CountryId: selectedCountryId }
                    });

                    window.feature.DistrictStore.load({
                        params: { CountryId: selectedCountryId, RegionId: '' }
                    });

                    window.feature.OutpostStore.load({
                        params: { CountryId: selectedCountryId, RegionId: '' }
                    });

                    window.feature.treegrid.getStore().proxy.extraParams.CountryId = selectedCountryId;
                    window.feature.treegrid.getStore().proxy.extraParams.RegionId = '';
                    window.feature.treegrid.getRootNode().expand();

                    showOverviewChart();
                }
            }
        });

        window.feature.comboBoxRegions = Ext.create('Ext.form.ComboBox', {
            store: window.feature.RegionStore,
            queryMode: 'local',
            id: window.feature.comboboxRegionsId,
            labelAlign: 'top',
            fieldLabel: 'Selected Region',
            labelClsExtra: 'combo-label',
            displayField: 'Name',
            valueField: 'Id',
            margin: '0 0 0 20',
            emptyText: _t('Region List'),
            columnWidth: 0.25,
            listeners: {
                select: function (combo, record, index) {
                    var selectedRegionId = record[0].data.Id;
                    var selectedCountryId = Ext.getCmp(window.feature.comboboxCountriesId).getValue();
                    window.feature.comboBoxOutposts.setValue(allOptionGUID);
                    window.feature.treegrid.getStore().proxy.extraParams.DistrictId = '';

                    window.feature.DistrictStore.load({
                        params: { CountryId: selectedCountryId, RegionId: selectedRegionId }
                    });
                    window.feature.OutpostStore.load({
                        params: { CountryId: selectedCountryId, RegionId: selectedRegionId }
                    });


                    window.feature.treegrid.setRootNode(null);
                    window.feature.treegrid.getStore().proxy.extraParams.RegionId = selectedRegionId;
                    window.feature.treegrid.getRootNode().expand();

                    showOverviewChart();
                }
            }
        });

        window.feature.comboBoxDistricts = Ext.create('Ext.form.ComboBox', {
            store: window.feature.DistrictStore,
            queryMode: 'local',
            id: window.feature.comboboxDistrictsId,
            labelAlign: 'top',
            fieldLabel: 'Selected District',
            labelClsExtra: 'combo-label',
            displayField: 'Name',
            valueField: 'Id',
            margin: '0 0 0 20',
            emptyText: _t('District List'),
            columnWidth: 0.25,
            listeners: {
                select: function (combo, record, index) {
                    var selectedDistrictId = record[0].data.Id;
                    var selectedCountryId = Ext.getCmp(window.feature.comboboxCountriesId).getValue();
                    var selectedRegionId = Ext.getCmp(window.feature.comboboxRegionsId).getValue();
                    window.feature.comboBoxOutposts.setValue(allOptionGUID);
                    window.feature.OutpostStore.load({
                        params: { CountryId: selectedCountryId, RegionId: selectedRegionId, DistrictId:selectedDistrictId }
                    });

                    window.feature.treegrid.setRootNode(null);
                    window.feature.treegrid.getStore().proxy.extraParams.DistrictId = selectedDistrictId;
                    window.feature.treegrid.getRootNode().expand();

                    showOverviewChart();
                }
            }
        });

        window.feature.comboBoxOutposts = Ext.create('Ext.form.ComboBox', {
            store: window.feature.OutpostStore,
            queryMode: 'local',            
            id: window.feature.comboboxOutpostsId,
            labelClsExtra: 'combo-label',
            labelAlign: 'top',
            fieldLabel: 'Selected Seller',
            displayField: 'Name',
            valueField: 'Id',            
            margin: '0 0 0 20',
            emptyText: _t('Seller List'),
            columnWidth: 0.25,
            listeners: {
                select: function (combo, record, index) {
                   var selectedOutpostId = record[0].data.Id;

                   window.feature.treegrid.setRootNode(null);
                   window.feature.treegrid.getStore().proxy.extraParams.OutpostId = selectedOutpostId;
                   window.feature.treegrid.getRootNode().expand();
                   if (selectedOutpostId == '@Guid.Empty') {
                       showOverviewChart();
                   }
                   else {
                       showSellerChart();
                   }
                   
                }
            }

        });

        Ext.define('ReportOutpostLevel', {
            extend: 'Ext.data.Model',
            fields: ['Name', 'ProductLevelSum', 'Id', 'ParentId', 'leaf','LowerLimit']
        });

        window.feature.treeStore = Ext.create('Ext.data.TreeStore', {
            model: 'ReportOutpostLevel',
            autoLoad: false,
            root: {},
            proxy: {
                type: 'ajax',
                url: '@Url.RouteUrl(AnalysisManagementAreaRegistration.DEFAULT_ROUTE, new { controller = "ReportOutpostLevel", action = "GetReports" })',
                extraParams: { CountryId: '', RegionId: '', DistrictId: '', OutpostId:'' }
            }
        });

        window.feature.ProductsStore = Ext.create('Ext.data.Store', {
            remoteSuport: true,
            fields: [
                { name: 'ProductName' },
                { name: 'StockLevel', type: 'int' },
                { name: 'LowerLimit', type: 'int' }
            ],
            proxy: {
                type: 'ajax',
                url: '@Url.RouteUrl(AnalysisManagementAreaRegistration.DEFAULT_ROUTE, new { controller = "ReportOutpostLevel", action = "GetProductsForChart" })',
                reader: {
                    type: 'json',
                    root: 'Items',
                    totalProperty: 'TotalItems'
                },
                simpleSortMode: true,
                extraParams: { outpostId: '' }
            },
            sorters: [{
                property: 'Name',
                direction: 'ASC'
            }]
        });

        //-----------------------------------------------
        Ext.regModel("StockLevelForOutposts", {
            fields: ['OutpostName', 'ProductsUnderTresholdNo', 'Total'],
            hasMany: { model: 'Product', name: 'Products' },
            proxy: {
                type: 'rest',
                url: '@Url.RouteUrl(AnalysisManagementAreaRegistration.DEFAULT_ROUTE, new { controller = "ReportOutpostLevel", action = "GetDataForStackedBarChart" })',
                reader: {
                    type: 'json',
                    root: 'Items',
                    totalProperty: 'TotalItems'
                },
                simpleSortMode: true,
                extraParams: { CountryId: '', RegionId: '', DistrictId: '', OutpostId: '' }
            }
        });

        Ext.regModel("Product", {
            fields: [
                'ProductName', 'StockLevel', 'LowerLimit'
            ],
            belongsTo: 'StockLevelForOutposts'
        });


        window.feature.StockLevelForOutpostsStore = Ext.create('Ext.data.Store', {
            remoteSuport: true,
            model: 'StockLevelForOutposts',
            sorters: [{
                property: 'ProductsUnderTreshholdNo',
                direction: 'Desc'
            }]
        });



        var productFields = [];
        var storeFields = [];
        var dataStore = [];
       // var chartSeries = [];
        //var colors = ['rgb(45, 117, 226)', 'rgb(154, 205, 50)', 'rgb(212, 40, 40)', 'rgb(255, 165, 0)', 'rgb(255, 215, 0)', 'rgb(208, 32, 144)',
        //                'rgb(64, 224, 208)', 'rgb(190, 190, 190)', 'rgb(139, 69, 19)', 'rgb(250, 128, 114)', 'rgb(148, 0, 211)', 'rgb( 28, 134, 238)',
        //                'rgb(255, 64, 64 )', 'rgb(255, 130, 71)', 'rgb(0, 100, 0)', 'rgb(238, 18, 137)', 'rgb(202, 255, 112)', 'rgb(142, 35, 35)',
        //                'rgb(255, 218, 185)', 'rgb(32, 178, 170)',
        //];

        //function GenerateStoreStructure() {
        //    storeFields = [];
        //    productFields = [];
        //    chartSeries = [];
        //    var i = 0;
        //    storeFields.push({ name: 'Day' });

        //    window.feature.ProductsStore.each(function (record) {
        //        productFields.push(record.get('ProductName'));
        //        storeFields.push({ name: record.get('ProductName'), type: 'int' });
        //        chartSeries.push({
        //            type: 'line',
        //            xField: 'Day',
        //            yField: record.get('ProductName'),
        //            highlight: { size: 7, radius: 7 },
        //            axis: 'left', smooth: true,
        //            markerConfig: { type: 'circle', size: 5, radius: 4, 'stroke-width': 0, fill: colors[i % colors.length], stroke: colors[i % colors.length] },
        //            style: { fill: colors[i % colors.length], stroke: colors[i % colors.length], 'stroke-width': 2, opacity: 1 },
        //        });
        //        i = i + 1;
        //    });
        //};

        //function GenerateData() {
        //    dataStore = [];
        //    var fieldNo = window.feature.ProductsStore.count();

        //    var i = 0;
        //    var row = [];
        //    while (i < 30) {
        //        if (i % fieldNo == 0) {
        //            row = [];
        //            row.push(Ext.String.format("{0}", i));
        //        }

        //        var stock = Math.floor(Math.random() * 10);
        //        row.push(stock);

        //        if (i % fieldNo == 0) {
        //            if (row.length > 0) {
        //                dataStore.push(row);
        //            }
        //        }
        //        i++;
        //    }

        //    return dataStore;
        //};

        function getMaxProdsUnderTreshold() {
            var maxTotal = 0;
            chartStore.each(function (record) {
                var total = record.get('ProductsUnderTresholdNo');
                if (total > maxTotal)
                    maxTotal = total;
            });

            return maxTotal;

        }
        function GenerateSellerOverviewChartStoreData() {
            storeFields = [];
            dataStore = [];

            storeFields.push({ name: 'OutpostName' });
            storeFields.push({ name: 'ProductsUnderTresholdNo', type: 'int' });

            productFields.forEach(function (entry) {
                storeFields.push({ name: entry, type: 'int' })
            })

            productFields.forEach(function (entry) {
                storeFields.push({ name: entry + "_Lower", type: 'int' })
            })

            storeFields.push({ name: 'Total', type: 'int' });

            window.feature.StockLevelForOutpostsStore.load({
                params: {
                    CountryId: Ext.getCmp(window.feature.comboboxCountriesId).getValue(),
                    RegionId: Ext.getCmp(window.feature.comboboxRegionsId).getValue(),
                    DistrictId: Ext.getCmp(window.feature.comboboxDistrictsId).getValue(),
                    OutpostId: Ext.getCmp(window.feature.comboboxOutpostsId).getValue(),
                    OnlyUnderTreshold: Ext.getCmp(window.feature.chkOnlyUnderTreshold).getValue()
                },
                callback: function () {
                    var prodFieldsLength = productFields.length;
                    window.feature.StockLevelForOutpostsStore.each(function (outpost) {

                        var row = new Array(prodFieldsLength * 2 + 3);
                        //var row = new Array(prodFieldsLength + 3);
                        for (var j = 1; j < row.length; j++) {
                            row[j] = 0;
                        }
                        row[0] = outpost.get('OutpostName');
                        row[1] = outpost.get('ProductsUnderTresholdNo');
                        row[row.length - 1] = outpost.get('Total');
                        outpost.Products().each(function (product) {

                            for (var i = 0; i < prodFieldsLength; i++) {
                                if (productFields[i] == product.get('ProductName')) {
                                    row[i + 2] = product.get('StockLevel');
                                    row[prodFieldsLength + 2 + i] = product.get('LowerLimit');
                                    break;
                                }
                            }
                        })
                        dataStore.push(row);
                    })
                    window.feature.executeSellerOverviewChart.delay(1000);
                }


            })

        };

        function showSellerChart()
        {
            window.feature.ProductsStore.load({
                params: { outpostId: Ext.getCmp(window.feature.comboboxOutpostsId).getValue() },
                callback:function() {
                    window.feature.executeSellerChart.delay(100)
                }
            });
            
        }
        function showOverviewChart() {
            var getFromUrl = '@Url.RouteUrl(AnalysisManagementAreaRegistration.DEFAULT_ROUTE, new { controller = "ReportOutpostLevel", action = "GetProductFields" })';

              var action = $.get(getFromUrl,
                      {
                          CountryId: Ext.getCmp(window.feature.comboboxCountriesId).getValue(),
                          RegionId: Ext.getCmp(window.feature.comboboxRegionsId).getValue(),
                          DistrictId: Ext.getCmp(window.feature.comboboxDistrictsId).getValue(),
                          OutpostId: Ext.getCmp(window.feature.comboboxOutpostsId).getValue(),
                          OnlyUnderTreshold: Ext.getCmp(window.feature.chkOnlyUnderTreshold).getValue()

                      })
              action.success(function (response) {
                  if (typeof (response) != "string")//there are no products
                  {
                      var chartContainer = Ext.getCmp('DivChartContainer');
                      var lbl = Ext.getCmp('lblNoSales');
                      chartContainer.remove(lbl);
                      var chart2 = Ext.getCmp('chartSellerOverviewLevel');
                      chartContainer.remove(chart2);
                      var chart1 = Ext.getCmp('chart1OutpostLevel');
                      chartContainer.remove(chart1);

                      chartContainer.add({ xtype: 'label', id: 'lblNoSales', margin: '40 0 0 10', text: 'There is no data for the selected filter.', cls: 'x-title-label' });

                  }
                  else {
                      productFields = response.split(",");
                      GenerateSellerOverviewChartStoreData()
                  }

              })
          }

        window.feature.executeSellerChart = new Ext.util.DelayedTask(function () {
            //GenerateStoreStructure();
            //var dataChart2 = GenerateData();
            //var storeChart2 = new Ext.data.SimpleStore({
            //    fields: storeFields
            //});
            //storeChart2.loadData(dataChart2);

            var storeChart1 = new Ext.data.SimpleStore({
                fields: [
                    { name: 'ProductName' },
                    { name: 'StockLevel', type: 'int' },
                    { name: 'LowerLimit', type: 'int' }
                ]
            });

            var dataChart1 = window.feature.ProductsStore.getRange();

            storeChart1.loadData(dataChart1);


            var chartContainer = Ext.getCmp('DivChartContainer');
            var chartOverview = Ext.getCmp('chartSellerOverviewLevel');
            chartContainer.remove(chartOverview);
            var chart1 = Ext.getCmp('chart1OutpostLevel');
            chartContainer.remove(chart1);
            var lbl = Ext.getCmp('lblNoSales');
            chartContainer.remove(lbl);

            if (storeChart1.getCount() == 0) {
                chartContainer.add({ xtype: 'label', id: 'lblNoSales', margin: '40 0 0 10', text: 'There is no data for the selected filter.', cls: 'x-title-label' });
                return;
            }


            chartContainer.add({
                id: 'chart1OutpostLevel',
                xtype: 'chart',
                flex: 1,
                minHeight: 300,
                animate: true,
                shadow: true,
                store: storeChart1,
                style: 'background:#fff',
                axes: [{
                    type: 'Numeric',
                    position: 'left',
                    fields: ['StockLevel'],
                    title: 'Current Stock Level',
                    grid: true,
                    minimum: 0
                }, {
                    type: 'Category',
                    position: 'bottom',
                    fields: ['ProductName'],
                    title: 'Products',
                    label: {
                        orientation: 'horizontal',
                        rotate: {
                            degrees: 60
                        }
                    }

                }],
                series: [{
                    type: 'column',
                    axis: 'left',
                    highlight: true,
                    tips: {
                        trackMouse: true,
                        width: 140,
                        renderer: function (storeItem, item) {
                            this.setTitle("<div style='padding-bottom:6px'>"+storeItem.get('ProductName') + '</div> Stock Level: ' + storeItem.get('StockLevel') + '<br/>Minimum Limit: '+storeItem.get('LowerLimit'));
                        }
                    },
                    xField: ['ProductName'],
                    yField: ['StockLevel'],
                    renderer: function (sprite, storeItem, barAttr, i, store) {
                        barAttr.fill = (storeItem.data.StockLevel<= storeItem.data.LowerLimit?'rgb(212, 40, 40)':'rgb(154, 205, 50)');
                        return barAttr;
                    },
                }]
                

            });

            //var chart2 = Ext.getCmp('chart2DistrictLevel');
            //cont.remove(chart2);

            //cont.add({
            //    id: 'chart2DistrictLevel',
            //    xtype: 'chart',
            //    flex: 1,
            //    minHeight: 300,
            //    margin: '25 0 0 0',
            //    style: 'background:#fff',
            //    animate: true,
            //    store: storeChart2,
            //    shadow: true,
            //    legend: {
            //        position: 'right',
            //        padding: 5,
            //        itemSpacing: 1
            //    },
            //    axes: [{
            //        type: 'Numeric',
            //        minimum: 0,
            //        position: 'left',
            //        fields: productFields,
            //        title: 'Historical Stock Level',
            //        minorTickSteps: 1
            //    }, {
            //        type: 'Numeric',
            //        position: 'bottom',
            //        fields: ['Day'],
            //        title: 'Day of the Month'
            //    }],
            //    series: chartSeries,
            //    legend: {
            //        position: 'right'

            //    }
            //});
        });

        window.feature.executeSellerOverviewChart = new Ext.util.DelayedTask(function () {

            chartStore = new Ext.data.ArrayStore({
                fields: storeFields
            })
            chartStore.loadData(dataStore);

            var chartContainer = Ext.getCmp('DivChartContainer');
            var chart2 = Ext.getCmp('chartSellerOverviewLevel');
            var chart1 = Ext.getCmp('chart1OutpostLevel');
            chartContainer.remove(chart1);
            chartContainer.remove(chart2);
            var lbl = Ext.getCmp('lblNoSales');
            chartContainer.remove(lbl);

            if (chartStore.getCount() == 0) {
                chartContainer.add({ xtype: 'label', id: 'lblNoSales', margin: '40 0 0 10', text: 'There is no data for the selected filter.', cls: 'x-title-label' });
                return;
            }

            chartContainer.add({
                id: 'chartSellerOverviewLevel',
                xtype: 'chart',
                flex: 1,
                insetPadding: 45,
                margin: '0 0 0 20',
                animate: true,
                shadow: true,
                store: chartStore,
                axes: [{
                    type: 'Numeric',
                    grid: true,
                    position: 'left',
                    fields: productFields,
                    title: 'Product Stock Levels (bars)',
                    minimum: 0,
                },
                {
                    type: 'Numeric',
                    position: 'right',
                    fields: ['ProductsUnderTresholdNo'],
                    title: 'Products Under Threshold',
                    minimum: 0,
                    maximum: getMaxProdsUnderTreshold(),
                    majorTickSteps: getMaxProdsUnderTreshold() - 1,
                }
                , {
                    type: 'Category',
                    position: 'bottom',
                    fields: ['OutpostName'],
                    title: 'Sellers',
                    grid: true
                }],
                series: [{
                    type: 'column',
                    highlight: false,
                    axis: 'bottom',
                    width: 40,
                    tips: {
                        trackMouse: true,
                        width: 140,
                        renderer: function (storeItem, item) {
                            this.setTitle("<div style='padding-bottom:6px'>"+item.yField + "</div>" + "Stock level: " + String(item.value[1]) + "<br/>" + "Minimum Limit: " + storeItem.get(item.yField + "_Lower"));
                        }
                    },
                    xField: 'OutpostName',
                    yField: productFields,
                    stacked: true,
                    renderer: function (sprite, record, attr, storeIndex, store) {
                        //if (storeIndex > store.getCount())
                        //    return attr;
                        // attr.fill = getColorForBar(record, (storeIndexHolder != storeIndex),storeIndex,store);
                        //(storeItem.data.StockLevel <= storeItem.data.LowerLimit ? 'rgb(212, 40, 40)' : 'rgb(154, 205, 50)');
                        //if (storeIndexHolder != storeIndex)
                        //    storeIndexHolder = storeIndex;
                        return attr;
                    },

                },
                {
                    type: 'line',
                    xField: 'OutpostName',
                    yField: ['ProductsUnderTresholdNo'],
                    title: 'UnderThreshold',
                    axis: 'right',
                    highlight: true,
                    tips: {
                        trackMouse: true,
                        width: 180,
                        height: 27,
                        renderer: function (storeItem, item) {
                            this.setTitle('Products under threshold: ' + storeItem.get('ProductsUnderTresholdNo'));
                        }
                    },

                    //label: {
                    //    display: 'over',
                    //    field: 'ProductsUnderTresholdNo',
                    //    renderer: Ext.util.Format.numberRenderer('0 under threshold'),
                    //    orientation: 'horizontal',
                    //    'text-anchor':'middle',
                    //    font: '14px Helvetica, sans-serif'

                    //},
                    selectionTolerance: 4,

                }
                ],
                legend: {
                    position: 'right'
                }
            });
        });

        window.feature.treegrid = Ext.create('Ext.tree.Panel', {
            useArrows: true,
            cls: 'white-border',
            rootVisible: false,
            flex: 1,
            scroll: 'vertical',
            root: {},
            store: window.feature.treeStore,
            multiSelect: true,
            autoScroll: true,
            singleExpand: false,
            viewConfig: {
                emptyText: '<div align="center" style="margin-top:75px; font: 17px Lucida Sans Unicode,Arial,Verdana,Geneva,Helvetica,sans-serif; color: #666666;">No data matches the parameters specified.</div>',
            },
            listeners: {
                itemclick: function (view, rec, item, index, eventObj) {
                   if (rec.isLeaf()) {
                        // some functionality to open the leaf(document) in a tabpanel
                    } else if (rec.isExpanded()) {
                       rec.collapse();
                    } else {
                        rec.expand();
                   }
            //        if (!rec.get('leaf') && rec.parentNode.parentNode !=null) {
            //            window.feature.ProductsStore.proxy.extraParams.productGroupId = rec.get('Id');
            //            window.feature.ProductsStore.proxy.extraParams.outpostId = rec.get('ParentId');

            //            window.feature.ProductsStore.load();

            //            window.feature.execute.delay(300);
            //        }
                }
            },
            columns: [{
                xtype: 'treecolumn',
                text: 'Seller / Product Group / Product',
                flex: 2,
                sortable: true,
                menuDisabled: true,
                dataIndex: 'Name'
            }, {
                xtype: 'templatecolumn',
                text: 'Product Level',
                flex: 1,
                sortable: true,
                menuDisabled: true,
                dataIndex: 'ProductLevelSum',
                align: 'center',
                tpl: Ext.create('Ext.XTemplate', '{ProductLevelSum:this.ProductLevelSum}', {
                    ProductLevelSum: function (value) {
                        return value;
                    }
                })
            }]
        });

        window.feature.container = Ext.create('Ext.container.Container', {
            margin: '15 15 15 15',
            padding: '20 0 0 20',
            autoScroll: true,
            id: 'TopContainer',
            layout: {
                align: 'stretch',
                type: 'hbox'
            },
            items: [{
                xtype: 'container',
                flex: 1,
                layout: {
                    align: 'stretch',
                    type: 'vbox'
                   },
                items: [{
                    xtype: 'container',
                    layout: {
                        align: 'stretch',
                        type: 'vbox'
                      },
                    height: 110,
                    items: [
                      {
                        xtype: 'container',
                        height: 45,
                        layout: {
                            type: 'column'
                        },
                        items: [{
                            xtype: 'label',
                            cls: 'x-title-label',
                            text: 'Product level information at seller level'
                        },
                        
                        ]
                       }, {
                        xtype: 'container',
                        height: 65,
                        layout: {
                            type: 'column',
                        },
                        items: [
                                window.feature.comboBoxCountries,
							    window.feature.comboBoxRegions,
                                window.feature.comboBoxDistricts,
                                window.feature.comboBoxOutposts
                        ]
                  }]
                },
                 window.feature.treegrid
                 
                ]
               }, {
                xtype: 'container',
                flex: 2,
                layout: {
                    align: 'stretch',
                    type: 'vbox'
                },
                padding: '0 0 0 20',
                items: [{
                    xtype: 'container',
                    id: 'DivChartContainer',
                    flex: 2,
                    layout: {
                        align: 'stretch',
                        type: 'vbox'
                    },
                    autoScroll: true,
                    items: [
                        {
                            xtype: 'checkbox',
                            id: window.feature.chkOnlyUnderTreshold,
                            boxLabel: '<b>Show products under threshold only</b>',
                            margin: '30 0 0 10',
                            listeners: {
                                change: function (chk, checked) {
                                    showOverviewChart();
                                }
                            }
                        }
                    ]
                }]
            }]
        });

        var contentRes = window.res.content;
        var mainContent = Ext.getCmp(contentRes.maincontent.id);

        mainContent.add(window.feature.container);

        window.feature.treegrid.setRootNode(null);

        
        window.feature.CountryStore.load({
            callback: function () {
                if ('@Model.countryId' != null) {
                    window.feature.comboBoxCountries.setValue('@Model.countryId');
                }

            }
        });
        window.feature.treegrid.getStore().proxy.extraParams.CountryId = allOptionGUID;
        window.feature.treegrid.getStore().proxy.extraParams.RegionId = allOptionGUID;
        window.feature.treegrid.getStore().proxy.extraParams.DistrictId = allOptionGUID;
        window.feature.treegrid.getStore().proxy.extraParams.OutpostId = allOptionGUID;

        if ('@Model.countryId' != null) {
            window.feature.RegionStore.proxy.extraParams.CountryId = '@Model.countryId';
            window.feature.treegrid.getStore().proxy.extraParams.CountryId = '@Model.countryId';
        }
        if ('@Model.regionId' != null) {
            window.feature.DistrictStore.proxy.extraParams.RegionId = '@Model.regionId';
            window.feature.treegrid.getStore().proxy.extraParams.RegionId = '@Model.regionId';
        }
        if ('@Model.districtId' != null) {
            window.feature.OutpostStore.proxy.extraParams.DistrictId = '@Model.districtId';
            window.feature.treegrid.getStore().proxy.extraParams.DistrictId = '@Model.districtId';
        }
        if ('@Model.outpostId' != null) {
            window.feature.treegrid.getStore().proxy.extraParams.OutpostId = '@Model.outpostId';
        }

        window.feature.RegionStore.load({
            callback: function() {window.feature.comboBoxRegions.setValue('@Model.regionId')}
        });
        window.feature.DistrictStore.load({
            callback: function () { window.feature.comboBoxDistricts.setValue('@Model.districtId') }
        });
        window.feature.OutpostStore.load({
            callback: function () {
                window.feature.comboBoxOutposts.setValue('@Model.outpostId');
                if ('@Model.outpostId' != null && '@Model.outpostId' != '@Guid.Empty') {
                    showSellerChart();
                }
                else {
                    showOverviewChart();
                }
            }
        });

        //window.feature.comboBoxCountries.setValue(allOptionGUID);
        //window.feature.comboBoxRegions.setValue(allOptionGUID);
        //window.feature.comboBoxDistricts.setValue(allOptionGUID);
        //window.feature.comboBoxOutposts.setValue(allOptionGUID);

        window.feature.treegrid.getRootNode().expand();
       
        
    });
</script>
