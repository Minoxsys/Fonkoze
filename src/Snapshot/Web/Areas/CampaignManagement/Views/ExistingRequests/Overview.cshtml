@section page_title{
    Campaign: Existing Requests
}
@{
    Html.RenderPartial("_SubNavigation");
    Html.RenderPartial("_CampaignManagementSideBar");
}
<script type="text/javascript">
    Ext.onReady(function () {
        var administrationBtnId = window.res.header.navigation.administration;
        var administrationBtn = Ext.getCmp(administrationBtnId);
        administrationBtn.toggle(true);

        var campaignAdministrationBtnId = window.res.header.subnavigation.buttonTabs.campaign;
        var campaignAdministrationBtn = Ext.getCmp(campaignAdministrationBtnId);
        campaignAdministrationBtn.toggle(true);

        var btnId = window.res.content.maincontent.sidebar.existingRequest;
        var existingReqBtn = Ext.getCmp(btnId);
        existingReqBtn.toggle(true);
    
    });
</script>
<script type="text/javascript">
    window.feature = {
        ids: {
            campaign: 'cmb-existing-requests-campaign-name',
            outpost: 'cmb-existing-requests-selected-outpost',
            from: 'dt-existing-requests-from',
            to: 'dt-existing-requests-to',
            viewRequests: 'btn-view-requests',
            grid: 'grd-existing-requests-overview'
        },
        stores: {
            campaign: null,
            outposts: null,
            grid: null
        },
        models: {
            ExistingRequest: null
        }
    };
    
</script>
<script type="text/javascript">

    /* Stores */
    Ext.onReady(function () {
        window.feature.models.ExistingRequest = Ext.define('ExistingRequestModel', {
            extend: 'Ext.data.Model',
            fields: [{
                name: 'id', type: 'string',
                convert: function (value, record) {
                    return record.get('Id');
                }
            },
            { name: 'Campaign', type: 'string' },
            { name: 'Outpost', type: 'string' },
            { name: 'Date', type: 'string' },
            { name: 'ProductGroup', type: 'string' },
            { name: 'ProductsNo', type: 'string' }
    
            ]
        });
    
        window.feature.stores.gridDefinition = Ext.define('ExistingRequestsStore', {
    
            extend: 'Ext.data.Store',
            model: window.feature.models.ExistingRequest,
    
            proxy: {
                type: 'ajax',
                url: '@Url.RouteUrl(CampaignManagementAreaRegistration.DEFAULT_ROUTE, new { controller = "ExistingRequests", action = "GetExistingRequests" })',
                extraParams:{
                    CampaignId:null,
                    OutpostId:null,
                    From:null,
                    To:null
                },
                reader: {
                    type: 'json',
                    totalProperty: 'TotalItems',
                    root: 'Items'
                }
            }
    
        });

        window.feature.stores.campaign = Ext.create('Ext.data.Store', {
    
            fields: ['Id', 'Name'],
            proxy: {
                type: 'ajax',
                url: '@Url.RouteUrl(CampaignManagementAreaRegistration.DEFAULT_ROUTE, new { controller = "ExistingRequests", action = "GetCampaigns" })',
                reader: {
                    type: 'json'
                }
            }
    
        });

        window.feature.stores.outposts = Ext.create('Ext.data.Store', {
    
            fields: ['Id', 'Name'],
            proxy: {
                type: 'ajax',
                url: '@Url.RouteUrl(CampaignManagementAreaRegistration.DEFAULT_ROUTE, new { controller = "ExistingRequests", action = "GetOutposts" })',
                extraParams:{
                    CampaignId:null
                },
                reader: {
                    type: 'json'
                }
            }
    
        });
    
    
    });
    
</script>
<script type="text/javascript">
    /* Grid */
    Ext.onReady(function () {
        window.feature.stores.grid = new window.feature.stores.gridDefinition();
    
        window.feature.grid = Ext.create('Ext.grid.Panel', {
            flex:1,
            cls: 'white-border',
            autoScroll: true,
            store: window.feature.stores.grid,
            viewConfig: {
                emptyText: '<div align="center" style="margin-top:75px; font: 17px Lucida Sans Unicode,Arial,Verdana,Geneva,Helvetica,sans-serif; color: #666666;">No data matches the parameters specified.</div>',
            },
            columns: [{
                header: 'Date',
                dataIndex: 'Date',
                flex: 1,
                minWidth: 110,
                menuDisabled: true        
            }, {
                header: 'Campaign Name',
                dataIndex: 'Campaign',
                flex: 1,
                minWidth: 100,
                menuDisabled: true
            }, {
                header: 'Seller Name',
                dataIndex: 'Outpost',
                flex: 1,
                minWidth: 100,
                menuDisabled: true
            }, {
                header: 'Product Group',
                dataIndex: 'ProductGroup',
                flex: 0.8,
                minWidth: 80,
                align: 'center',
                menuDisabled: true
            }, {
                header: '# of Products',
                dataIndex: 'ProductsNo',
                flex: 0.8,
                minWidth: 80,
                align: 'center',
                menuDisabled: true 
            }],
            bbar: Ext.create('Ext.PagingToolbar', {
                store: window.feature.stores.grid,
                displayInfo: true,
                displayMsg: 'Displaying existing requests {0} - {1} of {2}',
                emptyMsg: "",
                ui: 'snapshot-pagination-toolbar'
            })
        });
    
    });

</script>

<script type="text/javascript">
    function viewResults() {
        var campaign = Ext.getCmp(window.feature.ids.campaign);
        var outpost = Ext.getCmp(window.feature.ids.outpost);
        var from = Ext.getCmp(window.feature.ids.from);
        var to = Ext.getCmp(window.feature.ids.to);

        var validationOk = true;
        _([campaign, outpost, from, to]).each(function (field) {
           validationOk = validationOk && field.validate();
       });

       if (to.getValue() != null && from.getValue() != null && from.getValue() >= to.getValue()) {
           to.markInvalid('To date must be after From date!');
           validationOk = false;
       }

        if(!validationOk) return;

        Ext.apply(window.feature.stores.grid.getProxy().extraParams, {
           CampaignId: campaign.getValue(),
           OutpostId: outpost.getValue(),
           From: from.getValue(),
           To: to.getValue()
        });

        window.feature.stores.grid.loadPage(1);
    }
</script>

<script type="text/javascript">
    
    /* view */
    Ext.onReady(function () {
        var contentRes = window.res.content;
        var mainContent = Ext.getCmp(contentRes.maincontent.id);

        var topContainer = Ext.create('Ext.container.Container', {
            margin: '15 15 15 15',
            padding: '20 20 0 20',
            id: 'TopContainer',
            layout: {
                align: 'stretch',
                type: 'vbox'
            },
            items: [{
                    xtype: 'container',
                    height: 50,
                    layout: 'column',
                    items: [{
                        xtype: 'container',
                        height: 30,
                        width: 30,
                        html:'&nbsp;'
                    }, {
                        xtype: 'image',
                        src: '@(Url.RouteUrl<Web.Controllers.AssetsController>(it => it.Shared("/img/Administration/SubMenu/CampaignSelected.png"), Web.Bootstrap.Routes.AssetRoutesRegistrar.SHARED))',
                        margin: '0 10 10 0'
                   }, {
                        xtype: 'label',
                        cls: 'x-title-label',
                        html: 'Existing Requests'
                    }]
                }, {
                    xtype: 'container',
                    height: 65,
                    margin: '0 0 0 30',
                    layout: 'column',
                    items: [{
                        xtype: 'combobox',
                        id: window.feature.ids.campaign,
                        labelAlign: 'top',
                        fieldLabel: 'Campaign',
                        labelClsExtra: 'combo-label',
                        store: window.feature.stores.campaign,
                        emptyText: 'Campaign List',
                        allowBlank: false,
                        valueField: 'Id',
                        displayField: 'Name',
                        listeners: {
                            'select': function (cmb) {
                                window.feature.stores.outposts.getProxy().extraParams.CampaignId = cmb.getValue();
                                window.feature.stores.outposts.load();
                            }
                        }
                    }, {
                        xtype: 'combobox',
                        id: window.feature.ids.outpost,
                        labelAlign: 'top',
                        fieldLabel: 'Seller',
                        labelClsExtra: 'combo-label',
                        store: window.feature.stores.outposts,
                        emptyText: 'Campaign Sellers',
                        queryMode: 'local',
                        allowBlank: false,
                        valueField: 'Id',
                        displayField: 'Name'
                    }, {
                        xtype: 'datefield',
                        id: window.feature.ids.from,
                        labelAlign: 'top',
                        allowBlank: false,
                        fieldLabel: 'From',
                        labelClsExtra: 'combo-label'
                    }, {
                        xtype: 'datefield',
                        id: window.feature.ids.to,
                        labelAlign: 'top',
                        allowBlank: false,
                        fieldLabel: 'To',
                        labelClsExtra: 'combo-label'

                    }, {
                        xtype: 'button',
                        margin: '25 0 0 10',
                        text: 'View Requests',
                        ui: 'snapshot-add-btn',
                        cls: 'x-add-button-gradient',
                        handler: function (btn) {
                            viewResults();
                        }
                    }]
                },
                window.feature.grid
            ]
        });

        mainContent.add(topContainer);

        window.feature.stores.grid.loadPage(1);
    });    
    </script>
    