@using Domain
@using Microsoft.Web.Mvc;
@using Web.Models.Shared;
@section page_title{
Campaign: Overview
}
@{
    Html.RenderPartial("_SubNavigation");
    Html.RenderPartial("_CampaignManagementSideBar");
}
<script type="text/javascript">
    Ext.onReady(function () {
        var administrationBtnId = window.res.header.navigation.administration;
        var administrationBtn = Ext.getCmp(administrationBtnId);
        administrationBtn.toggle(true);

        var campaignAdministrationBtnId = window.res.header.subnavigation.buttonTabs.campaign;
        var campaignAdministrationBtn = Ext.getCmp(campaignAdministrationBtnId);
        campaignAdministrationBtn.toggle(true);

        var campaignBtnId = window.res.content.maincontent.sidebar.manageCampaigns;
        var campaignBtn = Ext.getCmp(campaignBtnId);
        campaignBtn.toggle(true);
    });
</script>
<style>
    .x-grid-checkheader
    {
        height: 14px;
        background-image: url('@Url.AssetUrl("img/unchecked.gif")');
        background-position: 50% -2px;
        background-repeat: no-repeat;
        background-color: transparent;
    }
    
    .x-grid-checkheader-checked
    {
        background-image: url('@Url.AssetUrl("img/checked.gif")');
    }
    
    .x-grid-checkheader-editor .x-form-cb-wrap
    {
        text-align: center;
    }
</style>
<script type="text/javascript">
    Ext.onReady(function () {
        window.feature = {};

        window.feature.searchCampaignName = 'Campaign-Search-Name';
        window.feature.leftGrid = 'Grid-Add-Campaign-Left';
        window.feature.rightGrid = 'Grid-Add-Campaign-Right';
        window.feature.rightGridTopLabel = 'Label-For-Right-Grid';
        window.feature.leftGridTopLabel = 'Label-For-Left-Grid';
        window.feature.formCampaignNameId = 'Form-Campaign-Name';
        window.feature.formCampaignStartDateId = 'Form-Campaign-Start-Date';
        window.feature.formCampaignEndDateId = 'Form-Campaign-End-Date';
        window.feature.wizardCampaignManagement = 'Wizard-Campaign-Management';       
        window.feature.nextButton = 'Form-Add-Campaign-Next-Button';
        window.feature.pressedButton = '';
        var campaign = {};

        window.feature.campaignStore = Ext.create('Ext.data.Store', {
            pageSize: 50,
            remoteSuport: true,
            fields: ['Id', 'Name', 'StartDate', 'EndDate', 'CreationDate', 'Opened', 'CountriesIds', 'RegionsIds', 'DistrictsIds', 'OutpostsIds'],
            proxy: {
                type: 'ajax',
                url: '@Url.RouteUrl(CampaignManagementAreaRegistration.DEFAULT_ROUTE, new { controller = "Campaign", action = "GetCampaigns" })',
                reader: {
                    type: 'json',
                    root: 'Campaigns',
                    totalProperty: 'TotalItems'
                },
                extraParams: { searchValue: '' },
                simpleSortMode: true
            },
            remoteSort: true,
            sorters: [{
                property: 'Name',
                direction: 'ASC'
            }]
        });

        window.feature.leftGridStore = Ext.create('Ext.data.Store', {
            remoteSuport: true,
            fields: ['Id', 'Name', 'Selected'],
            proxy: {
                type: 'ajax',
                url: '@Url.RouteUrl(CampaignManagementAreaRegistration.DEFAULT_ROUTE, new { controller = "Campaign", action = "GetLeftGridStore" })',
                reader: {
                    type: 'json',
                    root: 'Items',
                    totalProperty: 'TotalItems'
                },
                extraParams: { 
                    options: '',
                    idList: ''
                },
                simpleSortMode: true
            },
            sorters: [{
                property: 'Name',
                direction: 'ASC'
            }]
        });

        window.feature.rightGridStore = Ext.create('Ext.data.Store', {
            remoteSuport: true,
            fields: ['Id', 'Name', 'Selected'],
            proxy: {
                type: 'ajax',
                url: '@Url.RouteUrl(CampaignManagementAreaRegistration.DEFAULT_ROUTE, new { controller = "Campaign", action = "GetRightGridStore" })',
                reader: {
                    type: 'json',
                    root: 'Items',
                    totalProperty: 'TotalItems'
                },
                extraParams: { 
                    options: '',
                    idList: ''
                },
                simpleSortMode: true
            },
            sorters: [{
                property: 'Name',
                direction: 'ASC'
            }]
        });

        gridSelModels = Ext.define('MyApp.selModel', {
             extend: 'Ext.selection.CheckboxModel',
             checkOnly:true
        }); 

        Ext.define('Ext.ux.CheckColumn', {
            extend: 'Ext.grid.column.Column',
            alias: 'widget.checkcolumn',
        
            tdCls: Ext.baseCSSPrefix + 'grid-cell-checkcolumn',
                
            constructor: function () {
                this.addEvents(
                    'checkchange'
                    );
                this.callParent(arguments);
            },
                
            processEvent: function (type, view, cell, recordIndex, cellIndex, e) {
                if (type == 'mousedown' || (type == 'keydown' && (e.getKey() == e.ENTER || e.getKey() == e.SPACE))) {
                    var record = view.panel.store.getAt(recordIndex),
                    dataIndex = this.dataIndex,
                    checked = !record.get(dataIndex);
   
                    record.set(dataIndex, checked);
                    this.fireEvent('checkchange', this, recordIndex, checked);
                    // cancel selection.
                    return false;
                }
                else {
                    return this.callParent(arguments);
                }
            },
    
            renderer: function (value, styles, record, recordIndex, columnIndex, store, gridView) {
                var cssPrefix = Ext.baseCSSPrefix,
                cls = [cssPrefix + 'grid-checkheader'];
    
                if (value) {
                    cls.push(cssPrefix + 'grid-checkheader-checked');
                }
                return '<div class="' + cls.join(' ') + '">&#160;</div>';
            }
        });

        window.feature.Header = Ext.create('Ext.container.Container', {
            layout: 'hbox',
            height: 50,
            items: [
                {
                    xtype: 'container',
                    flex: 1,
                    layout: 'column',
                    items: [{
                        xtype: 'container',
                        height: 30,
                        width: 30,
                        html:'&nbsp;'
                    },{
                        xtype: 'label',
                        text: 'Campaign Administration',
                        margin: '0 0 0 10'
                    },{
                        xtype: 'button',
                        text: 'Add New Campaign',
                        margin: '0 0 0 20',
                        handler: function () {
                            window.feature.pressedButton = 'Add';
                            var modalWindowAddCampaign = new window.feature.modalCampaignManagement();
                            modalWindowAddCampaign.show();
                        }
                    }]
                },{
                    xtype: 'container',
                    layout: {
                        type: 'hbox',
                        pack: 'end'
                    },
                    flex: 1,
                    items: [{
                        xtype: 'textfield',
                        id: window.feature.searchCampaignName,
                        padding: '0 0 0 200',
                        width: 200,
                        frame: true,
                        emptyText: 'Campaign Search',
                        enableKeyEvents: true,
                        listeners: {
                            'keyup': {
                                fn: function (key) {
                                    var searchValue = Ext.getCmp(window.feature.searchCampaignName).getValue();
                                    window.feature.campaignStore.proxy.extraParams.searchValue = searchValue;
                                    window.feature.doSearch.delay(500);
                                }
                            }
                        }
                    }]
                }
            ]
        });

        window.feature.doSearch = new Ext.util.DelayedTask(function(){
			window.feature.campaignStore.loadPage(1);
		});

       
        window.feature.modalCampaignManagement = Ext.define('Ext.feature.campaign.Modal', {
            extend: 'Ext.window.Window',
            title: 'Add New Campaign',
            modal: true,
            margin: '45 50 20 0',
            height: 400,
            width: 800,
            layout: {
                type: 'vbox',
                align: 'stretch'
            },

            initComponent: function () {
                var me = this;

                var firstContainer = new window.feature.wizardCampaignManagementContainer();
                var gridsContainer = new window.feature.wizardGridManagementContainer();
         
                ClearFields();
                var stepNumber = 0;
                
                Ext.applyIf(me, {
                    items: [firstContainer]

                });

                me.buttons = [{
                    text: 'Cancel',
                    handler: function () {
                        firstContainer.destroy();
                        gridsContainer.destroy();

                        me.close();
                        me.destroy();
                    }
                }, {
                    text: 'Next',
                    id: window.feature.nextButton,
                    handler: function () {
                        stepNumber++;

                        if (stepNumber == 1) {
                            var name = Ext.getCmp(window.feature.formCampaignNameId);
                            var startDate = Ext.getCmp(window.feature.formCampaignStartDateId);
                            var endDate = Ext.getCmp(window.feature.formCampaignEndDateId);
                            
                            if (IsValid(name, startDate, endDate) == true){
                                GetCampainsFirstPageInfos(name, startDate, endDate);

                                firstContainer.destroy();

                                PrepareCountryDisplay();
                                me.add(gridsContainer);
                                me.doLayout();
                                
                            }else{
                                stepNumber--;
                            }
                        }

                        if (stepNumber == 2) {
                            var ids = GetRightGridStoreIds();
                            if (ids.length > 0){
                                DisplayRegions(ids);
                            }else{
                                Ext.Msg.alert("Error", "You need to select at least one country");
                                stepNumber--;
                            }
                        }

                        if (stepNumber == 3) {
                            var ids = GetRightGridStoreIds();
                            if (ids.length > 0){
                                DisplayDistricts(ids);
                            }else{
                                Ext.Msg.alert("Error", "You need to select at least one region");
                                stepNumber--;
                            }
                        }

                        if (stepNumber == 4) {
                            var ids = GetRightGridStoreIds();
                            if (ids.length > 0){
                                DisplayOutposts(ids);
                            }else{
                                Ext.Msg.alert("Error", "You need to select at least one district");
                                stepNumber--;
                            }
                        }

                        if (stepNumber == 5) {
                            var ids = GetRightGridStoreIds();
                            if (ids.length > 0){
                                stepNumber = 0;
                                campaign.Outposts = ids;
                                window.feature.rightGridStore.removeAll();
                                window.feature.leftGridStore.removeAll();

                                var values = {
                                    Id: campaign.Id,
                                    CampaignName: campaign.Name,
                                    StartDate: campaign.StartDate,
                                    EndDate: campaign.EndDate,
                                    CountriesIds: campaign.Countries,
                                    RegionsIds: campaign.Regions,
                                    DistrictsIds: campaign.Districts,
                                    OutpostsIds: campaign.Outposts
                                };

                                if (window.feature.pressedButton == 'Edit'){
                                    var postToUrl = '@Url.RouteUrl(CampaignManagementAreaRegistration.DEFAULT_ROUTE, new { controller = "Campaign", action = "Edit" })';
                                }else{
                                    var postToUrl = '@Url.RouteUrl(CampaignManagementAreaRegistration.DEFAULT_ROUTE, new { controller = "Campaign", action = "Create" })';
                                }

                                var action = $.post(postToUrl, values);
                                action.success(function (serverResponse) {
                                    if (serverResponse.Status == "Error") {
                                        Ext.Msg.alert(serverResponse.Status, serverResponse.Message);
                                    }
                                    else {
                                        gridsContainer.destroy();
                                    
                                        me.close();
                                        me.destroy();

                                        window.feature.campaignStore.loadPage(1);
                                    }
                                });
                            }else{
                                Ext.Msg.alert("Error", "You need to select at least one outpost");
                                stepNumber--;
                            }
                        }
                    }
                }],
                me.callParent(arguments);
            }
        });

        window.feature.grid = Ext.create('Ext.grid.Panel', {
            store: window.feature.campaignStore,
            flex: 3,
            disableSelection: true,
            loadMask: true,
            columns: [{
                text: "Campaign Name",
                dataIndex: 'Name',
                sortable: true,
                flex: 1
            }, {
                text: "Start Date",
                dataIndex: 'StartDate',
                sortable: true,
                flex: 1
            }, {
                text: "End Date",
                dataIndex: 'EndDate',
                sortable: true,
                flex: 1
            }, {
                text: "Creation Date",
                dataIndex: 'CreationDate',
                sortable: true,
                flex: 1
            }, {
                xtype: 'actioncolumn',
                text: 'Actions',
                items: [{
                    icon: '@(Url.RouteUrl<Web.Controllers.AssetsController>(it => it.Shared("/img/edit.png"), Web.Bootstrap.Routes.AssetRoutesRegistrar.SHARED))',
                    tooltip: _t('Edit this campaign'),
                    handler: function (grid, rowIndex, colIndex) {
                        window.feature.pressedButton = 'Edit';
                        var rec = grid.getStore().getAt(rowIndex);

                        if (rec.get('Opened') == false){
                            var modalWindowEditCampaign = new window.feature.modalCampaignManagement();
                            SetCampaignValues(rec);
                            modalWindowEditCampaign.show();
                        }else{
                            Ext.Msg.alert("Alert","This campaign is in process. It cannot be edited!");
                        }
                    }
                }, {
                    icon: '@(Url.RouteUrl<Web.Controllers.AssetsController>(it => it.Shared("/img/copy.png"), Web.Bootstrap.Routes.AssetRoutesRegistrar.SHARED))',
                    tooltip: _t('Clone this campaign'),
                    handler: function (grid, rowIndex, colIndex) {
                        var rec = grid.getStore().getAt(rowIndex);

                        var values = { id: rec.get('Id') };

                        var postToUrl = '@Url.RouteUrl(CampaignManagementAreaRegistration.DEFAULT_ROUTE, new { controller = "Campaign", action = "Clone" })';

                        var action = $.post(postToUrl, values);
                        action.success(function (serverResponse) {
                            Ext.Msg.alert(serverResponse.Status, serverResponse.Message);
                            window.feature.campaignStore.loadPage(1); 
                        });

                    }
                }]
            }],
            bbar: Ext.create('Ext.PagingToolbar', {
                store: window.feature.campaignStore,
                displayInfo: true,
                displayMsg: 'Displaying topics {0} - {1} of {2}',
                emptyMsg: "No topics to display"
            })
        });

        window.feature.container = Ext.create('Ext.container.Container', {
            autoScroll: true,
            id: 'TopContainer',
            layout: {
                align: 'stretch',
                type: 'vbox'
            },
            items: [
                window.feature.Header,
                window.feature.grid,
            {
                xtype: 'container',
                height: 150
            }]
        });

        window.feature.wizardCampaignManagementContainer = Ext.define('MyApp.view.ui.MyContainer', {
            extend: 'Ext.container.Container',
            id: window.feature.wizardCampaignManagement,
            flex: 1,
            margin: '20 0 0 20',
            layout: {
                type: 'hbox',
                align: 'stretch'
            },
            items: [{
                xtype: 'container',
                flex: 1,
                layout: {
                    type: 'vbox',
                    align: 'stretch'
                },
                items: [{
                    xtype: 'textfield',
                    fieldLabel: 'Campaign Name',
                    allowBlank:false,
                    id: window.feature.formCampaignNameId,
                },{
                    xtype: 'datefield',
                    margin: '20 0 0 0',
                    fieldLabel: 'Start Date',
                    format: 'd-M-Y',
                    allowBlank:false,
                    id: window.feature.formCampaignStartDateId,
                },{
                    xtype: 'datefield',
                    margin: '20 0 0 0',
                    fieldLabel: 'End Date',
                    allowBlank:false,
                    format: 'd-M-Y',
                    id: window.feature.formCampaignEndDateId,
                }] 
            },{
                xtype: 'container',
                flex: 1,
            }]
        });

        window.feature.wizardGridManagementContainer =  Ext.define('MyApp.view.ui.MyContainer', {
            extend: 'Ext.container.Container',
            id: window.feature.wizarCountryManagement,
            flex: 1,
            margin: '20 0 0 20',
            layout: {
                type: 'hbox',
                align: 'stretch'
            },

            items: [{
                xtype: 'container',
                flex: 2,
                layout: {
                    type: 'vbox',
                    align: 'stretch'
                },
                items: [{
                    xtype: 'label',
                    id: window.feature.leftGridTopLabel,
                },{
                    xtype: 'gridpanel',
                    id: window.feature.leftGrid,
                    store: window.feature.leftGridStore,
                    columnLines: true,
                    margin: '0 0 10 0',
                    loadMask: true,
                    flex:3,
                    autoScroll:true,
                    columns: [{
                        text: "Name",
                        dataIndex: 'Name',
                        flex: 1,
                        sortable: true
                    }, {
                        xtype: 'checkcolumn',
                        sortable: false,
                        dataIndex: 'Selected',
                        text: 'Selected'
                    }]
                }]
            },{
                xtype: 'container',
                flex: 1,
                layout: {
                    type: 'vbox',
                    align: 'center'
                },

                items: [{
                    xtype: 'container',
                    flex: 1,
                    layout: {
                        type: 'vbox',
                        pack: 'center',
                    },
                    items: [{
                        xtype: 'button',
                        margin: '0 0 5 0',
                        width: 80,
                        text: 'Add',
                        handler: function () {
                            var gridRight = Ext.getCmp(window.feature.rightGrid);
                            var gridLeft = Ext.getCmp(window.feature.leftGrid);

                            var gridLeftStore = Ext.getCmp(window.feature.leftGrid).getStore();
                            gridLeftStore.each(function (record) {
                                if (record.dirty){
                                    var newValue = {
                                        Id: record.get('Id'), 
                                        Name: record.get('Name'),
                                    };
                                    var contains = RightGridContains(newValue, gridRight);
                                    if (contains == false){
                                        window.feature.rightGridStore.insert(0, newValue);
                                    }
                                }
                            });

                        }
                    },{
                        xtype: 'button',
                        width: 80,
                        text: 'Remove',
                        handler: function () {
                            var rightGridStore = Ext.getCmp(window.feature.rightGrid).getStore();
                            rightGridStore.each(function (record) {
                                if (record.dirty){
                                    rightGridStore.remove(record);
                                }
                            });
                        }
                    }]

                }]
            },{
                xtype: 'container',
                flex: 2,
                layout: {
                    type: 'vbox',
                    align: 'stretch'
                },
                items: [{
                    xtype: 'label',
                    id: window.feature.rightGridTopLabel,
                },{
                    xtype: 'gridpanel',
                    id: window.feature.rightGrid,
                    store: window.feature.rightGridStore,
                    columnLines: true,
                    margin: '0 0 10 0',
                    loadMask: true,
                    flex:3,
                    autoScroll:true,
                    columns: [{
                        text: "Name",
                        dataIndex: 'Name',
                        flex: 1,
                        sortable: true
                    }, {
                        xtype: 'checkcolumn',
                        sortable: false,
                        dataIndex: 'Selected',
                        header: 'Selected'
                    }]
                }]
            }]
        });

         function PrepareCountryDisplay(){
            SetLabelText('Countries');
            LoadLeftGrid('GetCountries', '' );
            window.feature.rightGridStore.removeAll();
                            
            if (window.feature.pressedButton == 'Edit'){
                LoadRightGrid('GetCountriesForIds', campaign.countriesEdit);
            }
        };

        function DisplayRegions(ids){
            campaign.Countries = ids;
            SetLabelText('Regions');
            LoadLeftGrid('GetRegions', ids);
            window.feature.rightGridStore.removeAll();

            if (window.feature.pressedButton == 'Edit'){
                LoadRightGrid('GetRegionsForIds', campaign.regionsEdit);
            }
        };

        function DisplayDistricts(ids){
            campaign.Regions = ids;
            SetLabelText('Districts');
            LoadLeftGrid('GetDistricts', ids);
            window.feature.rightGridStore.removeAll();

            if (window.feature.pressedButton == 'Edit'){
                LoadRightGrid('GetDistrictsForIds', campaign.districtsEdit);
            }
        };

        function DisplayOutposts(ids){
            Ext.getCmp(window.feature.nextButton).setText('Save');
            campaign.Districts = ids;

            SetLabelText('Outposts');
            LoadLeftGrid('GetOutposts', ids);
            window.feature.rightGridStore.removeAll();

            if (window.feature.pressedButton == 'Edit'){
                LoadRightGrid('GetOutpostsForIds', campaign.outpostsEdit);
            }
        };

        function RightGridContains(value, grid){
            var ok = false;
            var gridRightStore = Ext.getCmp(window.feature.rightGrid).getStore();
            gridRightStore.each(function (record) {
                if (record.get('Id') == value.Id || record.get('Name') == value.Name)
                    ok = true;
            });

            return ok;
        }

        function LoadLeftGrid(option, ids){
            if (ids != ''){
                window.feature.leftGridStore.proxy.extraParams.idList = ids;
            }
            window.feature.leftGridStore.proxy.extraParams.options = option;
            window.feature.leftGridStore.load();
        };

        function SetLabelText(textMessage){
            Ext.getCmp(window.feature.leftGridTopLabel).setText(textMessage);
            Ext.getCmp(window.feature.rightGridTopLabel).setText('Selected ' +textMessage);
        };

        function GetRightGridStoreIds(){
            var ids = '';
            var gridRightStore = Ext.getCmp(window.feature.rightGrid).getStore();
            gridRightStore.each(function (record) {
                ids = ids + record.get('Id') + ',';
            });
            return ids;
        };
        function ClearFields(){
            Ext.getCmp(window.feature.formCampaignNameId).setValue(''); 
            Ext.getCmp(window.feature.formCampaignStartDateId).setValue(''); 
            Ext.getCmp(window.feature.formCampaignEndDateId).setValue('');
        };

        function SetCampaignValues(rec){
            Ext.getCmp(window.feature.formCampaignNameId).setValue(rec.get('Name'));
            Ext.getCmp(window.feature.formCampaignStartDateId).setValue(rec.get('StartDate'));
            Ext.getCmp(window.feature.formCampaignEndDateId).setValue(rec.get('EndDate'));

            campaign.Id = rec.get('Id');
            campaign.countriesEdit = rec.get('CountriesIds');
            campaign.regionsEdit = rec.get('RegionsIds');
            campaign.districtsEdit = rec.get('DistrictsIds');
            campaign.outpostsEdit = rec.get('OutpostsIds');
        };

        function LoadRightGrid(option, ids){
            window.feature.rightGridStore.proxy.extraParams.options = option;
            window.feature.rightGridStore.proxy.extraParams.idList = ids;
            window.feature.rightGridStore.load();
        };

        function GetCampainsFirstPageInfos(name, startDate, endDate){
            campaign.Name = name.getValue(); 
            campaign.StartDate = Ext.util.Format.date(startDate.getValue()); 
            campaign.EndDate = Ext.util.Format.date(endDate.getValue()); 
        };

        function IsValid(name, startDate, endDate){
            var ok = true;
            if (name.getValue() == ''){
                name.markInvalid('Field Name is required!');  
                name.setValue(null);
                ok = false;
            }

            if (startDate.getValue() == null){
                startDate.markInvalid('Field Start Date is required!');  
                startDate.setValue(null);
                ok = false;
            }

            if (endDate.getValue() == ''){
                endDate.markInvalid('Field End Date is required!');  
                endDate.setValue(null);
                ok = false;
            }
            return ok;
        };

        function IsValid(name, startDate, endDate){
            var ok = true;
            if (name.getValue() == ''){
                name.markInvalid('Field Name is required!');  
                name.setValue(null);
                ok = false;
            }

            if (startDate.getValue() == null){
                startDate.markInvalid('Field Start Date is required!');  
                startDate.setValue(null);
                ok = false;
            }

            if (endDate.getValue() == null){
                endDate.markInvalid('Field End Date is required!');  
                endDate.setValue(null);
                ok = false;
            }

            if (endDate.getValue()!= null && startDate.getValue() != null && startDate.getValue() >= endDate.getValue()){
                endDate.markInvalid('End Date must be after Start Date!');  
                ok = false;
            }

            
            return ok;
        }

        var contentRes = window.res.content;
        var mainContent = Ext.getCmp(contentRes.maincontent.id);

        mainContent.add(window.feature.container);
        window.feature.campaignStore.loadPage(1); 

    });
</script>
