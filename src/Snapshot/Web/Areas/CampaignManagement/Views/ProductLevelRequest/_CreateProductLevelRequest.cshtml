@using Web.Areas.StockAdministration;
<style>
    .x-grid-checkheader
    {
        height: 14px;
        background-image: url('@Url.AssetUrl("img/unchecked.gif")');
        background-position: 50% -2px;
        background-repeat: no-repeat;
        background-color: transparent;
    }
    
    .x-grid-checkheader-checked
    {
        background-image: url('@Url.AssetUrl("img/checked.gif")');
    }
    
    .x-grid-checkheader-editor .x-form-cb-wrap
    {
        text-align: center;
    }
</style>

<script type="text/javascript">


    window.feature.modal={};
    window.feature.modal.stores ={};
    window.feature.modal.models ={};

</script>

<script type="text/javascript">
    Ext.define('Ext.ux.CheckColumn', {
        extend: 'Ext.grid.column.Column',
        alias: 'widget.checkcolumn',

        tdCls: Ext.baseCSSPrefix + 'grid-cell-checkcolumn',

        constructor: function () {
            this.addEvents(
                'checkchange'
                );
            this.callParent(arguments);
        },

        processEvent: function (type, view, cell, recordIndex, cellIndex, e) {
            if (type == 'mousedown' || (type == 'keydown' && (e.getKey() == e.ENTER || e.getKey() == e.SPACE))) {
                var record = view.panel.store.getAt(recordIndex),
                dataIndex = this.dataIndex,
                checked = !record.get(dataIndex);

                record.set(dataIndex, checked);
                this.fireEvent('checkchange', this, recordIndex, checked);
                // cancel selection.
                return false;
            }
            else {
                return this.callParent(arguments);
            }
        },

        renderer: function (value, styles, record, recordIndex, columnIndex, store, gridView) {
            var cssPrefix = Ext.baseCSSPrefix,
            cls = [cssPrefix + 'grid-checkheader'];

            if (value) {
                cls.push(cssPrefix + 'grid-checkheader-checked');
            }
            return '<div class="' + cls.join(' ') + '">&#160;</div>';
        }
    });
</script>

<script type="text/javascript">
    window.feature.modal.models.Schedule = Ext.define('Ext.feature.Schedule', {
        extend: 'Ext.data.Model',
        fields: [
            { name: 'Id', type: 'string' },
            { name: 'ScheduleName', type: 'string' },
            { name: 'Basis', type: 'string' },
            { name: 'Frequency', type: 'string' },
            { name: 'Reminders' },{
                name: 'RemindersDisplay',
                type: 'string',
                convert: function (value, record) {
                    var result = [];
                    var i;
                    var reminders = record.get('Reminders');
                    if (reminders.length > 0) {
                        for (i = 0; i < reminders.length; i++) {
                            var periodType = reminders[i].PeriodType == 'Hourly' ? 'Hour' : 'Day';
                            var periodValue = reminders[i].PeriodValue;
    
                            if (periodValue > 1) {
                                periodType += 's';
                            }
    
                            var postfixes = ['', 'st', 'nd', 'rd'];
                            var index = i + 1;
                            var indexStr = index + (index < 4 ? postfixes[index] : 'th');
    
                            result[i] = Ext.String.format('{0} {1} {2} later', indexStr, periodValue, periodType);
                        }
                        return result.join('&nbsp;&nbsp;&nbsp;');
                    }
                    else {
                        return '-';
                    }
                }
            },
            { name: 'CreationDate', type: 'string' }
        ]
    });
</script>

<script type="text/javascript">
    window.feature.modal.stores.productGroups = Ext.define('snapshot-Outpost-ProductGroupsStore', {
    
        extend: 'Ext.data.Store',
        fields: ['Id', 'Name'],
        proxy: {
            type: 'ajax',
            url: '@Url.RouteUrl(CampaignManagementAreaRegistration.DEFAULT_ROUTE, new { controller = "ProductLevelRequest", action = "GetProductGroups" })',
            reader: {
                type: 'json',
                root: 'productGroups'
            }
        }
    });
    
</script>

<script type="text/javascript">
    window.feature.modal.stores.campaigns = Ext.define('snapshot-Outpost-CampaignsStore', {
    
        extend: 'Ext.data.Store',
        fields: ['Id', 'Name'],
        proxy: {
            type: 'ajax',
            url: '@Url.RouteUrl(CampaignManagementAreaRegistration.DEFAULT_ROUTE, new { controller = "ProductLevelRequest", action = "GetCampaigns" })',
            reader: {
                type: 'json'
            }
        }
    });
    
</script>

<script type="text/javascript">
    window.feature.modal.stores.products = Ext.define('snapshot-Outpost-ProductsStore', {
    
        extend: 'Ext.data.Store',
        fields: ['Id', 'ProductItem','SmsCode', 'Selected'],
        proxy: {
            type: 'ajax',
            url: '@Url.RouteUrl(CampaignManagementAreaRegistration.DEFAULT_ROUTE, new { controller = "ProductLevelRequest", action = "GetProducts" })',
            reader: {
                type: 'json'
            }
        }
    });
    
</script>

<script type="text/javascript">
    window.feature.modal.stores.schedules = Ext.define('snapshot-SchedulesStore', {
        extend: 'Ext.data.Store',
        model: window.feature.modal.models.Schedule,
        proxy: {
            type: 'ajax',
            url: '@Url.RouteUrl(CampaignManagementAreaRegistration.DEFAULT_ROUTE, new { controller = "ProductLevelRequest", action = "GetSchedules" })',
            reader: {
                type: 'json'
            }
        },
        remoteSort: true
    });
    
</script>

<script type="text/javascript">

    window.feature.createProductLevelRequest = Ext.define('snapshot-Outpost-AssignProductsModalWindow', {
        extend: 'Ext.window.Window',
        modal: true,
        ui: 'snapshot-popup-window',
        height: 600,
        width: 1200,
        bodyPadding: '20 10 10 10',
        layout: 'fit',
        disableSave: false,
        editable:true,
        initComponent: function () {
            var me = this;


            if (!me.editable) {
                me.setTitle(_t('Edit is disabled because product level request is already on a running schedule'));
            }

            me.buttons = [
                {
                    text: 'Cancel',
                    margin: '10 10 20 0',
                    ui: 'snapshot-cancel-btn',
                    cls: 'x-add-button-gradient',
                    handler: function () {
                        me.close();
                        me.destroy();
                    }
                }, {
                    text: 'Save',
                    disabled: !me.editable,
                    margin: '10 10 20 0',
                    ui: 'snapshot-add-btn',
                    cls: 'x-add-button-gradient',
                    handler: function () {
                        me.onSave();
                    }
                }
            ];

            me.productGroupStore = new window.feature.modal.stores.productGroups();
            me.schedules = new window.feature.modal.stores.schedules();
            me.products = new window.feature.modal.stores.products();
            me.campaigns = new window.feature.modal.stores.campaigns();

            me.items = [
                {
                    xtype: 'panel',
                    cls: 'white-border',
                    layout: {
                        type: 'vbox',
                        align: 'stretch'
                    },
                    items: [
                        {
                            xtype: 'panel',
                            height: 50,
                            layout: 'column',
                            items: [
                                {
                                    xtype: 'combobox',
                                    itemId: 'campaign',
                                    disabled: !me.editable,
                                    fieldLabel: 'Campaign',
                                    margin: '0 50 0 0',
                                    store: me.campaigns,
                                    emptyText: 'Campaign List',
                                    allowBlank: false,
                                    queryMode: 'local',
                                    valueField: 'Id',
                                    displayField: 'Name'

                                }, {
                                    xtype: 'combobox',
                                    itemId: 'productGroup',
                                    disabled: !me.editable,
                                    width: 280,
                                    fieldLabel: 'Product Group',
                                    store: me.productGroupStore,
                                    emptyText: 'Product Group List',
                                    allowBlank: false,
                                    queryMode: 'local',
                                    valueField: 'Id',
                                    displayField: 'Name',
                                    listeners: {
                                        'select': function (cmb) {
                                            me.onChangeProductGroup.apply(me, [cmb]);
                                        }
                                    }
                                }
                            ]
                        }, {
                            xtype: 'gridpanel',
                            autoscroll: true,
                            disabled: !me.editable,
                            cls: 'white-border',
                            store: me.products,
                            columns: [
                                {
                                    header: 'Product Item',
                                    dataIndex: 'ProductItem',
                                    menuDisabled:true,
                                    flex: 1
                                }, {
                                    header: 'SMS Code',
                                    dataIndex: 'SmsCode',
                                    menuDisabled:true,
                                    flex: 1
                                }, {
                                    xtype: 'checkcolumn',
                                    listeners: {
                                        'checkchange': function (column, rowIndex, value) {
                                            var record = me.products.getAt(rowIndex);
                                            record.commit();
                                        }
                                    },
                                    header: 'Selected',
                                    menuDisabled:true,
                                    dataIndex: 'Selected'
                                }
                            ],
                            flex: 1
                        }, {
                            xtype: 'panel',
                            height: 30,
                            html: _t('Please select a schedule')
                        }, {
                            xtype: 'gridpanel',
                            disabled: !me.editable,
                            cls: 'white-border',
                            itemId: 'schedules',
                            store: me.schedules,
                            autoscroll: true,
                            columns: [
                                {
                                    header: 'Schedule',
                                    dataIndex: 'ScheduleName',
                                    menuDisabled:true,
                                    flex: 1
                                }, {
                                    header: 'Basis',
                                    menuDisabled:true,
                                    dataIndex: 'Basis'
                                }, {
                                    header: 'Frequency',
                                    menuDisabled:true,
                                    dataIndex: 'Frequency'
                                }, {
                                    header: 'Reminders',
                                    flex: 1,
                                    menuDisabled:true,
                                    dataIndex: 'RemindersDisplay'
                                }, {
                                    xtype: 'checkcolumn',
                                    menuDisabled:true,
                                    listeners: {
                                        'checkchange': function (column, rowIndex, value) {
                                            if (value) {
                                                me.schedules.each(function (row, rowIdx) {
                                                    row.set('Selected', rowIdx == rowIndex);
                                                });
                                            }
                                        }
                                    },
                                    header: 'Selected',
                                    dataIndex: 'Selected'
                                }
                            ],
                            viewConfig: {

                            },
                            flex: 1
                        }
                    ]

                }

            ];

            me.callParent(arguments);
            me.campaigns.load();
            me.productGroupStore.load();
            if (me.data) {
                me.schedules.on('datachanged', function () {
                    me.schedules.each(function (schedule) {
                        if (schedule.get('Id') === me.data.ScheduleId) {
                            _.delay(function () {
                                schedule.set('Selected', true);
                                schedule.commit();
                            }, 10);
                        }
                    });
                });

                me.products.on('datachanged', function () {
                    me.products.each(function (product) {
                        if (_(me.data.ProductIds).include(product.get('Id'))) {
                            _.delay(function () {
                                product.set('Selected', true);
                                product.commit();
                            }, 10);
                        }
                    });

                });
            }
            me.schedules.on('load', function () {

                me.schedules.insert(0, [
                    {
                        Id: '@Guid.Empty',
                        ScheduleName: 'Now',
                        Basis: 'Now',
                        Frequency: 'Now',
                        Reminders: []
                    }
                ]);
            });
            me.schedules.load();
            if (me.data) {
                me.down('#campaign').setValue(me.data.CampaignId);
                var prdGroup = me.down('#productGroup');
                prdGroup.setValue(me.data.ProductGroupId);

                me.onChangeProductGroup(prdGroup);

            }

        },

        onChangeProductGroup: function (cmb) {
            var me = this;

            me.products.proxy.extraParams = {
                productGroupId: cmb.getValue()
            }

            me.products.load();
        },
        onSave: function () {
            var me = this;

            var msgAlert = Ext.Msg;

            if (me.disableSave) return;

            var campaign = me.down('#campaign');
            var productGroup = me.down('#productGroup');

            if (!campaign.validate()) {
                return;
            }

            if (!productGroup.validate()) {
                return;
            }

            var params = {
                CampaignId: campaign.getValue(),
                ProductGroupId: productGroup.getValue(),
                Products: [],
                ScheduleId: null
            }

            var atLeastOneProductSelected = false;
            me.products.each(function (schedule) {
                var value = _(schedule.data).clone();
                delete value.id;
                atLeastOneProductSelected = atLeastOneProductSelected || value.Selected;

                params.Products.push(value);
            });

            if (!atLeastOneProductSelected) {
                msgAlert.ui = 'snapshot-popup-window';
                msgAlert.msgButtons['ok'].ui = 'snapshot-add-btn';
                msgAlert.msgButtons['ok'].margin = '10 10 20 0';
                msgAlert.alert('No product selected', 'At least one product must be selected in order to create a product level request.');
                return;
            }

            var record = me.schedules.findRecord('Selected', true);
            if (record) {
                params.ScheduleId = record.get('Id');
            }
            else {
                msgAlert.ui = 'snapshot-popup-window';
                msgAlert.msgButtons['ok'].ui = 'snapshot-add-btn';
                msgAlert.msgButtons['ok'].margin = '10 10 20 0';
                msgAlert.alert('No schedule selected', 'A schedule must be selected in order to create a product level request.');
                return;
            }

            var url = '@Url.RouteUrl(CampaignManagementAreaRegistration.DEFAULT_ROUTE, new { controller = "ProductLevelRequest", action = "Create" })';
            if (me.data) {
                params.Id = me.data.Id;
                url = '@Url.RouteUrl(CampaignManagementAreaRegistration.DEFAULT_ROUTE, new { controller = "ProductLevelRequest", action = "Edit" })';
            }

            me.disableSave = true;

            var action = $.ajax({
                url: url,
                type: 'POST',
                contentType: 'application/json; charset=UTF-8',
                data: Ext.encode(params),
                dataType: "json"
            });

            action.success(function () {
                me.gridStore.loadPage(1);
                me.destroy();
            });
            action.fail(function () {
                me.disableSave = false;
            });

        }

    });
</script>