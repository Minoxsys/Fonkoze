@using Web.Areas.StockAdministration.Models.ProductGroup
@using Domain
@using Microsoft.Web.Mvc;

@section page_title{
Product Administration Product Groups: Overview
}

@{
    Html.RenderPartial("_SubNavigation");
    Html.RenderPartial("_ProductAdministrationSideBar");
}

<script type="text/javascript">
    Ext.onReady(function () {
        var administrationBtnId = window.res.header.navigation.administration;
        var administrationBtn = Ext.getCmp(administrationBtnId);
        administrationBtn.toggle(true);

        var productAdministrationBtnId = window.res.header.subnavigation.buttonTabs.product;
        var productAdministrationBtn = Ext.getCmp(productAdministrationBtnId);
        productAdministrationBtn.toggle(true);
        productAdministrationBtn.setIcon('@(Url.RouteUrl<Web.Controllers.AssetsController>(it => it.Shared("/img/Administration/SubMenu/ProductSelected.png"), Web.Bootstrap.Routes.AssetRoutesRegistrar.SHARED))');
       
        var productGroupBtnId = window.res.content.maincontent.sidebar.productGroup;
        var productGroupBtn = Ext.getCmp(productGroupBtnId);
        productGroupBtn.toggle(true);
    });
</script>

<script type="text/javascript">

    Ext.onReady(function () {
        window.feature = {};

        window.feature.formProductGroupDescriptionId = 'Form-ProductGroup-Name';
        window.feature.formProductGroupNameId = 'Form-Product-Group-Description';
        window.feature.formProductGroupReferenceCodeId = 'Form-Product-Group-Reference-Code';
        window.feature.searchProductGroupName = 'Search-Product-Group-Name';
        
        window.feature.gridProductGroupId = 'Product-Group-Grid-Id';


        window.feature.productGroupStore = Ext.create('Ext.data.Store', {
            pageSize: 50,
            remoteSuport: true,
            fields: ['Id', 'Name', 'Description', 'ProductsNo', 'ReferenceCode'],
            proxy: {
                type: 'ajax',
                url: '@Url.RouteUrl(StockAdministrationAreaRegistration.DEFAULT_ROUTE, new { controller = "ProductGroup", action = "GetProductGroups" })',
                reader: {
                    type: 'json',
                    root: 'ProductGroups',
                    totalProperty: 'TotalItems'
                },
                extraParams: { searchValue: '' },
                simpleSortMode: true
            },
            remoteSort: true,
            sorters: [{
                property: 'Name',
                direction: 'ASC'
            }]
        });

        window.feature.modal = Ext.define('Ext.feature.region.Modal', {
            extend: 'Ext.window.Window',
            modal:true,
            ui: 'snapshot-popup-window',
            height: 260,
            width: 390,
            layout: {
                align: 'stretch',
                padding: 10,
                type: 'vbox'
            },

            initComponent: function () {
                var me = this;

                Ext.applyIf(me, {
                    items: [{
                        xtype: 'textfield',
                        name: 'Name',
                        fieldLabel: 'Product Group Name',
                        anchor: '100%',
                        itemId: window.feature.formProductGroupNameId,
                    },{
                        xtype: 'textfield',
                        
                        name: 'ReferenceCode',
                        fieldLabel: 'Product Group Reference Code',
                        anchor: '100%',
                        itemId: window.feature.formProductGroupReferenceCodeId,
                        regex: /^[A-Za-z]{3}$/,
                        regexText:'You need to provide 3 letters!'
                    },{
                        xtype: 'textareafield',
                        name: 'Description',
                        fieldLabel: 'Description',
                        grow: true,
                        anchor: '100%',
                        itemId: window.feature.formProductGroupDescriptionId
                    }]
                });

                 me.callParent(arguments);
            }
        });

        Ext.QuickTips.init();

        function addTooltip(val, meta, rec, rowIdx, colIdx, ds){
            meta.tdAttr = 'data-qtip="' + rec.get('Description') +'"' ;
            return val;
        };  
        
        window.feature.doSearch = new Ext.util.DelayedTask(function(){
			window.feature.productGroupStore.loadPage(1);
		});    

        window.feature.container = Ext.create('Ext.container.Container', {
            margin:'45 50 20 20',
            padding:'20 0 0 20',
            autoScroll: true,
            id: 'TopContainer',
            layout: {
                align: 'stretch',
                type: 'vbox'
            },
            items: [{
                xtype: 'container',
                layout: {
                    type: 'hbox',
                },
                height: 60,
                items:[{
                    xtype: 'container',
                    flex: 1,
                    layout: {
                        type: 'column'
                    },
                    height:70,
                    items: [{
                        xtype: 'container',
                        height: 30,
                        width: 30,
                        html:'&nbsp;'
                    },{xtype: 'image',
                       src: '@(Url.RouteUrl<Web.Controllers.AssetsController>(it => it.Shared("/img/Administration/SubMenu/ProductSelected.png"), Web.Bootstrap.Routes.AssetRoutesRegistrar.SHARED))',
                       margin: '0 10 10 10'
                      },{
                        xtype: 'label',
                        cls: 'x-title-label',
                        text: 'Product Group',
                    },{
                        xtype: 'button',
                        margin: '0 0 0 20',
                        ui: 'snapshot-add-btn',
                        cls: 'x-add-button-gradient',
                        disabled: @(ViewBag.HasNoRightsToAdd),
                        text: 'Add New Product Group',
                        handler: function(){
                            var winAdd = new window.feature.modal({
                                title: 'Add New Product Group',
                                buttons: [
                                    { text: 'Cancel',
                                      margin: '10 10 20 0',
                                      ui: 'snapshot-cancel-btn',
                                      cls: 'x-add-button-gradient',
                                      handler:function(){ winAdd.close(); winAdd.destroy();} },
                                    { text: 'Save',
                                      margin: '0 20 20 10',
                                      ui: 'snapshot-add-btn',
                                      cls: 'x-add-button-gradient',
                                      handler:function(){
                                        var productGroupName = winAdd.down('#'+window.feature.formProductGroupNameId);
                                        var productGroupDescription = winAdd.down('#'+window.feature.formProductGroupDescriptionId);
                                        var productGroupReferenceCode = winAdd.down('#'+window.feature.formProductGroupReferenceCodeId);
                                    
                                        var ok = IsValid(productGroupName, productGroupDescription, productGroupReferenceCode);
                                        if (ok == true){
                                            var values = {
                                                Name:  productGroupName.getValue(),
                                                Description:  productGroupDescription.getValue(),
                                                ReferenceCode: productGroupReferenceCode.getValue(),
                                            };

                                            var postToUrl = '@Url.RouteUrl(StockAdministrationAreaRegistration.DEFAULT_ROUTE, new { controller = "ProductGroup", action = "Create" })';
                                            var action = $.post(postToUrl, values);
                                            action.success(function(serverResponse){
                                                if(serverResponse.Status === "Error"){
                                                    var msgAlert = Ext.Msg;
                                                    msgAlert.ui = 'snapshot-popup-window';
                                                    msgAlert.msgButtons['ok'].ui = 'snapshot-add-btn';
                                                    msgAlert.alert(serverResponse.Status, serverResponse.Message);
                                                }else{
                                                winAdd.close();
                                                winAdd.destroy();
                                                window.feature.productGroupStore.loadPage(1);
                                                }
                                            });
                                        }

                                    }
                                    }
                                ]
                            });
                            winAdd.show();
                        }
                    }]
                },{
                    xtype: 'container',
                    flex: 1,
                    layout: {
                        type: 'hbox',
                        pack:'end'
                    },
                    height: 80,
                    items: [{
                        xtype: 'textfield',
                        itemId: window.feature.searchProductGroupName,
                        width: 200,
                        frame: true,
                        cls: 'text-field-rounded',
                        emptyText: 'Product Group Search',
                        enableKeyEvents: true,
                        listeners: {
                            'keyup': {
                                fn: function(key) {
                                    var searchValue = window.feature.container.down('#'+window.feature.searchProductGroupName).getValue();
                                    window.feature.productGroupStore.proxy.extraParams.searchValue = searchValue;
                                    window.feature.doSearch.delay(500);
                                }
                            }
                        }
                    }]

                }]
            },{
                xtype: 'gridpanel',
                cls: 'white-border',
                itemId: window.feature.gridProductGroupId,
                store: window.feature.productGroupStore,
                loadMask: true,
                disableSelection: true,
                flex:3,
                autoScroll:true,
                columns: [{
                    header: "Product Group",
                    dataIndex: 'Name',
                    flex: 1,
                    menuDisabled: true,
                    sortable: true,
                    renderer: addTooltip,
                },{
                    text: "Number of Products",
                    dataIndex: 'ProductsNo',
                    flex: 1,
                    menuDisabled: true,
                    sortable: false
                },{
                    xtype: 'actioncolumn',
			        text: 'Actions',
                    flex: 1,
                    menuDisabled: true,
                    items: [{
                        icon: '@(Url.RouteUrl<Web.Controllers.AssetsController>(it => it.Shared("/img/edit.png"), Web.Bootstrap.Routes.AssetRoutesRegistrar.SHARED))', 
                        action: 'Edit',
                        handler: function(grid, rowIndex, colIndex) {
                        if(@(ViewBag.HasNoRightsToAdd) === true){
                                           var msgAlert = Ext.Msg;
                                            msgAlert.ui = 'snapshot-popup-window';
                                            msgAlert.msgButtons['ok'].ui = 'snapshot-add-btn';
                                            msgAlert.msgButtons['ok'].margin = '10 10 20 0';
                                            msgAlert.alert("Alert","You have no rights for this action!");
                            }else{
                            var rec = grid.getStore().getAt(rowIndex);

                            var winEdit = new window.feature.modal({
                                title: Ext.String.format('Edit Product Group {0}', rec.get('Name')),
                                buttons: [
                                { text: 'Cancel',
                                  margin: '10 10 20 0',
                                  ui: 'snapshot-cancel-btn',
                                  cls: 'x-add-button-gradient', handler:function(){ winEdit.close(); winEdit.destroy();} },
                                { text: 'Save',
                                  margin: '0 20 20 10',
                                  ui: 'snapshot-add-btn',
                                  cls: 'x-add-button-gradient', handler:function(){
                                    var productGroupName = winEdit.down('#'+window.feature.formProductGroupNameId);
                                    var productGroupDescription = winEdit.down('#'+window.feature.formProductGroupDescriptionId);
                                    var productGroupReferenceCode = winEdit.down('#'+window.feature.formProductGroupReferenceCodeId);
                                    
                                    var ok = IsValid(productGroupName, productGroupDescription, productGroupReferenceCode);
                                    if (ok == true){
                                        var values = {
                                            Id: rec.get('Id'),
                                            Name:  productGroupName.getValue(),
                                            Description:  productGroupDescription.getValue(),
                                            ReferenceCode: productGroupReferenceCode.getValue(),
                                        };

                                        var postToUrl = '@Url.RouteUrl(StockAdministrationAreaRegistration.DEFAULT_ROUTE, new { controller = "ProductGroup", action = "Edit" })';
                                        var action = $.post(postToUrl, values);
                                        action.success(function(serverResponse){
                                            if(serverResponse.Status === "Error"){
                                                var msgAlert = Ext.Msg;
                                                msgAlert.ui = 'snapshot-popup-window';
                                                msgAlert.msgButtons['ok'].ui = 'snapshot-add-btn';
                                                msgAlert.alert(serverResponse.Status, serverResponse.Message);
                                            }else{
                                                winEdit.close();
                                                winEdit.destroy();
                                                window.feature.productGroupStore.loadPage(1);
                                            }
                                        });
                                    }
                                }
                                }
                            ]
                                
                            });

                            winEdit.down('#'+window.feature.formProductGroupNameId).setValue(rec.get('Name'));
                            winEdit.down('#'+window.feature.formProductGroupDescriptionId).setValue(rec.get('Description'));
                            winEdit.down('#'+window.feature.formProductGroupReferenceCodeId).setValue(rec.get('ReferenceCode'));

                            winEdit.show();
                            }
                        }
                    },{
                        icon: '@(Url.RouteUrl<Web.Controllers.AssetsController>(it => it.Shared("/img/delete.png"), Web.Bootstrap.Routes.AssetRoutesRegistrar.SHARED))',     
                        action: 'Delete',
					        handler: function(grid, rowIndex, colIndex) {
                            if(@(ViewBag.HasNoRightsToDelete) === true){
                                           var msgAlert = Ext.Msg;
                                            msgAlert.ui = 'snapshot-popup-window';
                                            msgAlert.msgButtons['ok'].ui = 'snapshot-add-btn';
                                            msgAlert.msgButtons['ok'].margin = '10 10 20 0';
                                            msgAlert.alert("Alert","You have no rights for this action!");
                            }else{
                                var rec = grid.getStore().getAt(rowIndex);
                                var msgConfirm = Ext.Msg;
                                msgConfirm.ui = 'snapshot-popup-window';
                                msgConfirm.msgButtons['no'].ui = 'snapshot-cancel-btn';
                                msgConfirm.msgButtons['yes'].ui = 'snapshot-add-btn';
                                msgConfirm.msgButtons['ok'].ui = 'snapshot-add-btn';
                                msgConfirm.confirm('Warning', Ext.String.format('Are you sure you want to delete {0} ?', rec.get('Name')), function(btn)
                                {
                                    if (btn=='yes'){
                                        var values = { productGroupId: rec.get('Id') };
                                        var postToUrl = '@Url.RouteUrl(StockAdministrationAreaRegistration.DEFAULT_ROUTE, new { controller = "ProductGroup", action = "Delete" })';
                                        var action = $.post(postToUrl, values);

                                        action.success(function(serverResponse){
                                            if(serverResponse.Status === "Error"){
                                               var msgAlert = Ext.Msg;
                                                msgAlert.ui = 'snapshot-popup-window';
                                                msgAlert.alert(serverResponse.Status, serverResponse.Message);
                                              }
                                            window.feature.productGroupStore.loadPage(1);
                                        });
                                    }
                                });
                                }
					        }
                    }]
                }],
                bbar: Ext.create('Ext.PagingToolbar', {
                    store: window.feature.productGroupStore,
                    displayInfo: true,
                    displayMsg: 'Displaying topics {0} - {1} of {2}',
                    emptyMsg: "No topics to display",
                    ui: 'snapshot-pagination-toolbar'
                })
            },{
                xtype:'container',
                height:150
            }]
        });

        function IsValid(name, description, referenceCode){
            var ok = true;
            if (name.getValue() == ''){
                name.markInvalid('Field Name is required!');  
                name.setValue(null);
                ok = false;
            }

            if (description.getValue() == ''){
                description.markInvalid('Field Description is required!');  
                description.setValue(null);
                ok = false;
            }

            if (referenceCode.getValue() == ''){
                referenceCode.markInvalid('Field Product Group Reference Code is required!');  
                referenceCode.setValue(null);
                ok = false;
            }else{
                if (referenceCode.getValue().length>3 || referenceCode.getValue().length<3){
                    referenceCode.markInvalid('Imput length value must be 3!');  
                    ok = false;
                }
            }

            if (!referenceCode.isValid()){
                 ok = false;
            }

            return ok;
        };

        var contentRes = window.res.content;
        var mainContent = Ext.getCmp(contentRes.maincontent.id);

        mainContent.add(window.feature.container);
        window.feature.productGroupStore.loadPage(1);

    });
</script>

