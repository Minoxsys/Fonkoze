@using Microsoft.Web.Mvc;

@section page_title{
Historical Product Level: Overview
}

@{
    Html.RenderPartial("_OutpostStockLevelSubNavigation");
    Html.RenderPartial("_OutpostStockLevelSideBar");
}

@model  Web.Areas.StockAdministration.Models.HistoricalProductLevel.ProductSalesFilterModel

<script type="text/javascript">
    Ext.onReady(function () {
        var outpostStockLevelBtnId = window.res.header.navigation.outpostStockLevel;
        var outpostStockLevelBtn = Ext.getCmp(outpostStockLevelBtnId);
        outpostStockLevelBtn.toggle(true);

        var historicalBtnId = window.res.content.maincontent.sidebar.outpostStockLevelHistorical;
        var historicalBtn = Ext.getCmp(historicalBtnId);
        historicalBtn.toggle(true);
    });
</script>

<script type="text/javascript">

    Ext.onReady(function ()
    {
        window.feature = {};
        window.feature.countryComboboxId = 'Overview-Combobox-Country-Historical';
        window.feature.regionComboboxId = 'Overview-Combobox-Region-Historical';
        window.feature.districtComboboxId = 'Overview-Combobox-District-Historical';
        window.feature.outpostComboboxId = 'Overview-Combobox-Outpost-Historical';
        window.feature.productComboboxId = 'Overview-Combobox-Product-Historical';
        window.feature.clientComboboxId = 'Overview-Combobox-Client-Historical';

        window.feature.containerForHistoricalGridId = 'Container-For-Historical-Grid-Id';
        window.feature.viewProductStockLevelId = 'Button-For-View-Product-Stock-Level-Id';
        window.feature.startDateId = 'Overview-Datefield-StartDate';
        window.feature.endDateId = 'Overview-Datefield-EndDate';

        window.feature.chartContainerId = 'Overview-ChartContainer-Id';
        window.feature.chartId = 'Overview-productSalesTotalChart-Id';
        
        var currentDate = new Date();
        var prevMonthDate = new Date();
        prevMonthDate.setMonth(currentDate.getMonth() - 1);

//#region Main
        window.feature.countryStore = Ext.create('Ext.data.Store',
        {
            remoteSort: true,
            fields: ['Id','Name'],
            proxy: {
                type: 'ajax',
                url: '@Url.RouteUrl(Web.Areas.OutpostManagement.OutpostManagementAreaRegistration.DEFAULT_ROUTE, new { controller = "Region", action = "GetCountries" })',
                reader: {
                    type: 'json',
                    root: 'Countries',
                    totalProperty: 'TotalItems'
                },
                simpleSortMode: true
            },
            sorters: [{
                property: 'Name',
                direction: 'ASC'
            }]
        }
        );
//#endregion

        window.feature.regionStore = Ext.create('Ext.data.Store', {
            remoteSort: true,
            fields: ['Id','Name'],
            proxy: {
                type: 'ajax',
                url: '@Url.RouteUrl(Web.Areas.OutpostManagement.OutpostManagementAreaRegistration.DEFAULT_ROUTE, new { controller = "District", action = "GetRegions" })',
                reader: {
                    type: 'json',
                    root: 'regions',
                    totalProperty: 'TotalItems'
                },
                extraParams: { countryId: '' },
                simpleSortMode: true
            },
            sorters: [{
                property: 'Name',
                direction: 'ASC'
            }]
        });


        window.feature.districtStore = Ext.create('Ext.data.Store', {
            remoteSort: true,
            fields: ['Id','Name'],
            proxy: {
                type: 'ajax',
                url: '@Url.RouteUrl(Web.Areas.OutpostManagement.OutpostManagementAreaRegistration.DEFAULT_ROUTE, new { controller = "Outpost", action = "GetDistricts" })',
                reader: {
                    type: 'json',
                    root: 'Districts',
                    totalProperty: 'TotalItems'
                },
                extraParams: { regionId: '' },
                simpleSortMode: true
            },
            sorters: [{
                property: 'Name',
                direction: 'ASC'
            }]
        });

        window.feature.outpostStore = Ext.create('Ext.data.Store', {
            remoteSort: true,
            fields: ['Id','Name'],
            proxy: {
                type: 'ajax',
                url: '@Url.RouteUrl(StockAdministrationAreaRegistration.DEFAULT_ROUTE, new { controller = "HistoricalProductLevel", action = "GetOutposts" })',
                reader: {
                    type: 'json',
                    root: 'Items',
                    totalProperty: 'TotalItems'
                },
                extraParams: { districtId: '' },
                simpleSortMode: true
            },
            sorters: [{
                property: 'Name',
                direction: 'ASC'
            }]
        });

        window.feature.productStore = Ext.create('Ext.data.Store', {
            fields: ['Id', 'Name'],
            proxy: {
                type: 'ajax',
                url: '@Url.RouteUrl(StockAdministrationAreaRegistration.DEFAULT_ROUTE, new { controller = "HistoricalProductLevel", action = "GetProducts" })',
                reader: {
                    type: 'json',
                    root: 'Items',
                    totalProperty: 'TotalItems'
                },
                extraParams: { countryId: '', regionId:'',districId:'',outpostId:'' },
                simpleSortMode: true
            },
            sorters: [{
                property: 'Name',
                direction: 'ASC'
            }]
        })

       
        
        window.feature.clientStore = Ext.create('Ext.data.ArrayStore', {
            fields: ['Id', 'Name'],
            data: [['0','All'],['F','Fonkoze'],['N','Non-Fonkoze']]
        })

            
        window.feature.container = Ext.create('Ext.container.Container', {
            margin: '15 15 15 15',
            padding: '20 20 0 20',
            autoScroll:true,
            id:'TopContainer',
            layout: {
                align: 'stretch',
                type: 'vbox'
            },
            items: [{
                xtype: 'container',
                flex:1,
                layout: {
                    align: 'stretch',
                    type: 'vbox'
                },
               items: [
               {
                   xtype: 'container',
                   height: 50,
                   layout: {
                       type: 'column'
                   },
                   items: [{
                       xtype: 'container',
                       height: 30,
                       width: 30,
                       html:'&nbsp;'
                   },{
                       xtype: 'image',
                       src: '@(Url.RouteUrl<Web.Controllers.AssetsController>(it => it.Shared("/img/OutpostStockLevel/HistoricalProductLevel.png"), Web.Bootstrap.Routes.AssetRoutesRegistrar.SHARED))',
                       margin: '0 10 10 0'
                   },{
                       xtype: 'label',
                       cls: 'x-title-label',
                       text: 'Historical Product Sales'
                   },
                   {
                       xtype: 'button',
                       margin: '0 10 0 20',
                       ui: 'snapshot-add-btn',
                       cls: 'x-add-button-gradient',
                       text: 'Table View',
                       handler: function () {
                           var url = '@Url.RouteUrl(StockAdministrationAreaRegistration.DEFAULT_ROUTE, new { controller = "HistoricalProductLevel", action = "GoToTableView" })'
                           url += BuildQueryString();
                           navigateTo(url);
                       }
                   }
                   ]
               },
                  {  xtype: 'container',
                      height: 65,
                      margin: '0 0 0 30',
                      layout: {
                          type: 'column'
                      },
                      items: [{
                          xtype: 'datefield',
                          fieldLabel: 'Start Date',
                          width: 170,
                          format: 'd-M-Y',
                          labelAlign: 'top',
                          itemId: window.feature.startDateId,
                          value: prevMonthDate,
                          listeners: {
                              select: function (dt, newValue, oldValue, eOpts) {
                                  showChart();
                              }
                          }
                         
                      },
                      {
                          xtype: 'datefield',
                          fieldLabel: 'End Date',
                          width: 170,
                          labelAlign: 'top',
                          format: 'd-M-Y',
                          itemId:window.feature.endDateId,
                          value: currentDate,
                          maxValue: currentDate,
                          listeners: {
                              select: function (dt, newValue, oldValue, eOpts) {
                                  showChart();
                              }
                          }
                              
                      },
                      {
                          xtype: 'radiogroup',
                          margin: '20 0 0 40',
                          fieldLabel: 'Granularity ',
                          verical: false,
                          width:300,
                          items: [
                               {
                                   id: 'chkDay',
                                   boxLabel: 'Day',
                                   checked: true,
                                   inputValue: 'd',
                                   name:'rb',
                                   listeners: {
                                       change: function (chk, checked) {
                                           if (checked) {
                                               window.feature.chartStore.proxy.extraParams.granularity = "d";
                                               showChart();
                                           }
                                       }
                                   }

                               }
                      ,
                      {
                          id: 'chkWeek',
                          boxLabel: 'Week',
                          inputValue: 'w',
                          name: 'rb',
                          listeners: {
                              change: function (chk, checked) {
                                  if (checked) {
                                      window.feature.chartStore.proxy.extraParams.granularity = "w";
                                      showChart();
                                  }
                              }
                          }
                      }
                      ,
                      {
                          id: 'chkMonth',
                          boxLabel: 'Month',
                          inputValue: 'm',
                          name: 'rb',
                          listeners: {
                              change: function (chk, checked) {
                                  if (checked) {
                                      window.feature.chartStore.proxy.extraParams.granularity = "m";
                                      showChart();
                                  }
                              }
                          }
                      }

                          ]

                      },
                     
                 ]},
                {
                    xtype: 'container',
                    height: 65,
                    margin: '0 0 0 30',
                    layout: {
                        type: 'column'
                    },
                    items: [{
                        xtype: 'combobox',
                        itemId: window.feature.countryComboboxId,
                        store: window.feature.countryStore,
                        labelAlign: 'top',
                        queryMode: 'local',
                        fieldLabel: 'Selected Country',
                        displayField: 'Name',
                        valueField: 'Id',
                        labelClsExtra: 'combo-label',
                        emptyText: 'Country List',
                        typeAhead: true,
                        editable: false,
                        listeners: {
                            'select': function (combo, record) {
                                ResetCountryDependencies();

                                window.feature.regionStore.proxy.extraParams.countryId = combo.getValue();
                                window.feature.regionStore.load();

                                window.feature.productStore.proxy.extraParams.countryId = combo.getValue();
                                window.feature.productStore.load();

                                var regionCombobox = window.feature.container.down('#' + window.feature.regionComboboxId);
                                regionCombobox.enable();

                                showChart();
                            },
                            specialkey: function (field, e) {
                                if (e.getKey() == e.BACKSPACE || e.getKey() == e.DELETE) {
                                    field.setValue('@Guid.Empty');
                                    ResetCountryDependencies();
                                }
                            }
                        }
                    },{
                        xtype: 'combobox',
                        itemId: window.feature.regionComboboxId,
                        store: window.feature.regionStore,
                        disabled: false,
                        queryMode: 'local',
                        labelAlign: 'top',
                        fieldLabel: 'Selected Region',
                        displayField: 'Name',
                        valueField:'Id',
                        labelClsExtra: 'combo-label',
                        emptyText: 'Region List', 
                        typeAhead: true,
                        editable: false,
                        listeners:{
                            'select': function(combo, record){
                                ResetRegionDependencies();

                                window.feature.districtStore.proxy.extraParams.regionId = combo.getValue();
                                window.feature.districtStore.load();

                                window.feature.productStore.proxy.extraParams.regionId = combo.getValue();
                                window.feature.productStore.load();

                                var districtCombobox = window.feature.container.down('#'+window.feature.districtComboboxId);
                                districtCombobox.enable();

                                showChart();
                            },
                            specialkey: function(field, e){
                                if (e.getKey() == e.BACKSPACE || e.getKey() == e.DELETE) {
                                    field.setValue('@Guid.Empty');
                                    ResetRegionDependencies();
                                }
                            }
                        } 
                    },{ 
                        xtype: 'combobox',
                        itemId: window.feature.districtComboboxId,
                        store: window.feature.districtStore,
                        disabled: false,
                        queryMode: 'local',
                        labelAlign: 'top',
                        fieldLabel: 'Selected District',
                        displayField: 'Name',
                        labelClsExtra: 'combo-label',
                        valueField:'Id',
                        emptyText: 'District List', 
                        typeAhead: true,
                        editable: false,
                        listeners:{
                            'select': function(combo, record){
                                ResetDistrictDependencies();

                                window.feature.outpostStore.proxy.extraParams.districtId = combo.getValue();
                                window.feature.outpostStore.load();

                                window.feature.productStore.proxy.extraParams.districId = combo.getValue();
                                window.feature.productStore.load();

                                var outpostCombobox = window.feature.container.down('#'+window.feature.outpostComboboxId);
                                outpostCombobox.enable();

                                showChart();
                            },
                            specialkey: function(field, e){
                                if (e.getKey() == e.BACKSPACE || e.getKey() == e.DELETE) {
                                    field.setValue('@Guid.Empty');
                                    ResetDistrictDependencies();
                                }
                            }
                        } 
                    },{ 
                        xtype: 'combobox',
                        itemId: window.feature.outpostComboboxId,
                        store: window.feature.outpostStore,
                        disabled: false,
                        queryMode: 'local',
                        labelAlign: 'top',
                        labelClsExtra: 'combo-label',
                        fieldLabel: 'Selected Seller',
                        displayField: 'Name',
                        valueField:'Id',
                        emptyText: 'Seller List', 
                        typeAhead: true,
                        editable: false,
                        listeners:{
                            'select': function (combo, record) {

                                window.feature.productStore.proxy.extraParams.outpostId = combo.getValue();
                                window.feature.productStore.load();

                                showChart();

                                //var viewButton = window.feature.container.down('#'+window.feature.viewProductStockLevelId);
                                //viewButton.enable();
                            },
                            specialkey: function(field, e){
                                if (e.getKey() == e.BACKSPACE || e.getKey() == e.DELETE) {
                                    field.setValue('@Guid.Empty');
                                }
                            }
                        }
			                
                    }, {
                        xtype: 'combobox',
                        itemId: window.feature.productComboboxId,
                        store: window.feature.productStore,
                        disabled: false,
                        labelAlign: 'top',
                        queryMode: 'local',
                        labelClsExtra: 'combo-label',
                        fieldLabel: 'Selected Product',
                        displayField: 'Name',
                        valueField: 'Id',
                        emptyText: 'Product List',
                        typeAhead: true,
                        editable: false,
                        listeners: {
                            select: function (combo, record) { showChart(); }
                        }
                       
                    },
                    {
                        xtype: 'combobox',
                        itemId: window.feature.clientComboboxId,
                        store: window.feature.clientStore,
                        labelAlign: 'top',
                        queryMode: 'local',
                        labelClsExtra: 'combo-label',
                        fieldLabel: 'Selected Client',
                        displayField: 'Name',
                        valueField: 'Id',
                        emptyText: 'Client Type',
                        typeAhead: true,
                        editable: false,
                        value: '0',
                        listeners: {
                            select: function (combo, record) { showChart(); }
                        }
                    },
                    //{
                    //    xtype: 'button',
                    //    margin: '25 0 0 0',
                    //    text: 'View Product Sales',
                    //    ui: 'snapshot-add-btn',
                    //    cls: 'x-add-button-gradient',
                    //    disabled: false,
                    //    itemId: window.feature.viewProductStockLevelId,
                    //    handler: function(){
                          
                    //    }

                    //}
                    ]
                },
                {
                    xtype: 'container',
                    flex: 1,
                    minHeight:200,
                    layout:'fit',
                    padding: '0 20 0 20',
                    items: [{
                        xtype: 'container',
                        id: window.feature.chartContainerId,
                        layout: {
                            align: 'stretch',
                            type: 'vbox'
                        },
                        autoScroll: true,
                        items: [
                           
                        ]
                    }]
                }
               ]
            },

            ]
        });

 //-----Chart Stuff ------


        window.feature.chartStore = Ext.create('Ext.data.ArrayStore', {
            remoteSort:true,
            fields: ['Day', { name: 'Quantity', type: 'int' }, 'Date'],
            proxy: {
                type: 'ajax',
                url: '@Url.RouteUrl(StockAdministrationAreaRegistration.DEFAULT_ROUTE, new { controller = "HistoricalProductLevel", action = "GetChartData" })',
                reader: {
                    type: 'json',
                    root: 'Items',
                    totalProperty: 'TotalItems'
                },
                extraParams: {
                    countryId: '',
                    regionId: '',
                    districtId: '',
                    outpostId: '',
                    startDate: '',
                    endDate: '',
                    productId: '',
                    clientId: '',
                    granularity:''
                },
                simpleSortMode: true
            }
            
           // data: [['1', '5', '9-May-2013'], ['5', '9', '9-May-2013'], ['10', '2', '9-May-2013'], ['15', '10', '9-May-2013'], ['20', '14', '9-May-2013'], ['25', '25', '9-May-2013'], ['30', '11', '9-May-2013']]
        })

        function setChartTitle()
        {
            if (window.feature.chartStore.proxy.extraParams.granularity == "" || window.feature.chartStore.proxy.extraParams.granularity == "d")
                return "Day of the Month";
            else if (window.feature.chartStore.proxy.extraParams.granularity == "w")
                return "Week";
            return "Month";
        }

        function showChart() {
            ResetExtraParams();
            SetNewExtraParams();
            window.feature.chartStore.load({
                callback: function () {
                    window.feature.executeDelayedChartDisplay.delay(1000);
                }
            });

        }
        window.feature.executeDelayed = new Ext.util.DelayedTask(function () {
            showChart();
        })

        window.feature.executeDelayedChartDisplay = new Ext.util.DelayedTask(function () {

            var chartContainer = Ext.getCmp(window.feature.chartContainerId);
            var previousChart = Ext.getCmp(window.feature.chartId);
            chartContainer.remove(previousChart);
            var lbl = Ext.getCmp('lblNoSales');
            chartContainer.remove(lbl);

            if (window.feature.chartStore.getCount() == 0)
            {
                chartContainer.add({ xtype: 'label',id:'lblNoSales', margin: '50 0 0 10', text: 'There are no sales for the selected filter.', cls: 'x-title-label' });
                return;
            }
            

            chartContainer.add(
                {
                    id: window.feature.chartId,
                    xtype: 'chart',
                    minHeight: 300,
                    flex: 2,
                    store: window.feature.chartStore,
                    animate: true,
                    axes: [{
                        type: 'Numeric',
                        position: 'left',
                        fields: ['Quantity'],
                        title: 'Total Sales - Quantity',
                        minimum: 0,
                        grid: true
                    },
                    {
                        type: 'Category',
                        position: 'bottom',
                        fields: ['Day'],
                        title: setChartTitle(),


                    }],
                    series: [{
                        type: 'line',
                        xField: 'Day',
                        yField: 'Quantity',
                        axis: 'left',
                        highlight:true,
                        tips: {
                            trackMouse: true,
                            width: 220,
                            renderer: function (storeItem, item) {
                                this.setTitle('Quantity: ' + String(item.value[1]) + "<br/> Date: " + storeItem.get('Date'));
                            }
                        },
                        
                    }]
                }
                );

            
        })

 

        
        function ClearDistrictStore() {
            var noOfItemsToDelete = window.feature.districtStore.getCount() - 1;
            window.feature.districtStore.removeAt(1, noOfItemsToDelete);
        };

        function ClearOutpostStore() {
            var noOfItemsToDelete = window.feature.outpostStore.getCount() - 1;
            window.feature.outpostStore.removeAt(1, noOfItemsToDelete);
        };

        function ResetCountryDependencies() {
            var regionCombobox = window.feature.container.down('#' + window.feature.regionComboboxId);
            regionCombobox.setValue('@Guid.Empty');

            var districtCombobox = window.feature.container.down('#' + window.feature.districtComboboxId);
            districtCombobox.setValue('@Guid.Empty');

            var outpostCombobox = window.feature.container.down('#' + window.feature.outpostComboboxId);
            outpostCombobox.setValue('@Guid.Empty');

            ClearDistrictStore();
            ClearOutpostStore();
        };

        function ResetDistrictDependencies() {
            var outpostCombobox = window.feature.container.down('#' + window.feature.outpostComboboxId);
            outpostCombobox.setValue('@Guid.Empty');
        };

        function ResetRegionDependencies() {
            var districtCombobox = window.feature.container.down('#' + window.feature.districtComboboxId);
            districtCombobox.setValue('@Guid.Empty');

            window.feature.districtStore.proxy.extraParams.regionId = districtCombobox.getValue();
            outpostCombobox.setValue('@Guid.Empty');

            ClearOutpostStore();
        };


        function ResetExtraParams(){
            window.feature.chartStore.proxy.extraParams.outpostId = null;
            window.feature.chartStore.proxy.extraParams.districtId = null;
            window.feature.chartStore.proxy.extraParams.regionId = null;
            window.feature.chartStore.proxy.extraParams.countryId = null;
            window.feature.chartStore.proxy.extraParams.productId = null;
            window.feature.chartStore.proxy.extraParams.clientId = null;
            window.feature.chartStore.proxy.extraParams.startDate = null;
            window.feature.chartStore.proxy.extraParams.endDate = null;
            
        };
        function BuildQueryString()
        {
            var startDtSelValue = window.feature.container.down('#' + window.feature.startDateId).rawValue;
            var endDtSelValue = window.feature.container.down('#' + window.feature.endDateId).rawValue;
            var countrySelValue = window.feature.container.down('#' + window.feature.countryComboboxId).getValue();
            var regionSelValue = window.feature.container.down('#' + window.feature.regionComboboxId).getValue();
            var districtSelValue = window.feature.container.down('#' + window.feature.districtComboboxId).getValue();
            var outpostSelValue = window.feature.container.down('#' + window.feature.outpostComboboxId).getValue();
            var productSelValue = window.feature.container.down('#' + window.feature.productComboboxId).getValue();
            var clientSelValue = window.feature.container.down('#' + window.feature.clientComboboxId).getValue();
            var queryStr = "?StartDate=" + startDtSelValue + "&EndDate=" + endDtSelValue + "&CountryId=" + countrySelValue + "&RegionId=" + regionSelValue +
                "&DistrictId=" + districtSelValue + "&OutpostId=" + outpostSelValue + "&ProductId=" + productSelValue + "&Client=" + clientSelValue
            return queryStr;
        }
        
        function SetNewExtraParams(){
            var outpostSelectedValue = window.feature.container.down('#'+window.feature.outpostComboboxId).getValue();
            if (outpostSelectedValue != null){
                window.feature.chartStore.proxy.extraParams.outpostId = outpostSelectedValue;
            }

            var districtSelectedValue = window.feature.container.down('#'+window.feature.districtComboboxId).getValue();
            if (districtSelectedValue != null){
                window.feature.chartStore.proxy.extraParams.districtId = districtSelectedValue;
            }

            var regionSelectedValue = window.feature.container.down('#'+window.feature.regionComboboxId).getValue();
            if (regionSelectedValue != null){
                window.feature.chartStore.proxy.extraParams.regionId = regionSelectedValue;
            }

            var countrySelectedValue = window.feature.container.down('#'+window.feature.countryComboboxId).getValue();
            if (countrySelectedValue != null){
                window.feature.chartStore.proxy.extraParams.countryId = countrySelectedValue;
            }

            var productSelectedValue = window.feature.container.down('#' + window.feature.productComboboxId).getValue();
            if (productSelectedValue != null)            {
                window.feature.chartStore.proxy.extraParams.productId = productSelectedValue;
            }

            var clientSelectedValue = window.feature.container.down('#' + window.feature.clientComboboxId).getValue();
            if (clientSelectedValue != null) {
                window.feature.chartStore.proxy.extraParams.clientId = clientSelectedValue;
            }
            var startDateSelValue = window.feature.container.down('#' + window.feature.startDateId).getValue();
            if (startDateSelValue != null) {
                window.feature.chartStore.proxy.extraParams.startDate = startDateSelValue;
            }
            var endDateSelValue = window.feature.container.down('#' + window.feature.endDateId).getValue();
            if (endDateSelValue != null) {
                window.feature.chartStore.proxy.extraParams.endDate = endDateSelValue;
            }
           
        };

        var contentRes = window.res.content;
        var mainContent = Ext.getCmp(contentRes.maincontent.id);

        mainContent.add(window.feature.container);

        var startDataCtrl = window.feature.container.down('#' + window.feature.startDateId);
        var endDataCtrl = window.feature.container.down('#' + window.feature.endDateId);
        var countryCombobox = window.feature.container.down('#'+window.feature.countryComboboxId);
        var regionCombobox = window.feature.container.down('#'+window.feature.regionComboboxId);
        var districtCombobox = window.feature.container.down('#'+window.feature.districtComboboxId);
        var outpostCombobox = window.feature.container.down('#' + window.feature.outpostComboboxId);
        var productCombobox = window.feature.container.down('#' + window.feature.productComboboxId);

       window.feature.countryStore.load();        
        
        window.feature.productStore.load({
            callback: function () {

                if ('@Model.ProductId' != '' && '@Model.ProductId' != '@Guid.Empty') {
                    productCombobox.setValue('@Model.ProductId');
                }
                else {
                    productCombobox.setValue('@Guid.Empty');
                }
            }
         });

        if ('@Model.CountryId' != '' && '@Model.CountryId' != '@Guid.Empty') {
            window.feature.regionStore.load({
                params: { countryId: '@Model.CountryId' },
            });
            countryCombobox.setValue('@Model.CountryId');
        }
        else {
            window.feature.regionStore.load({
                params: { countryId: '@Guid.Empty' },
             });
            countryCombobox.setValue('@Guid.Empty');
        }

        if ('@Model.RegionId' != '' && '@Model.RegionId' != '@Guid.Empty') {
            window.feature.districtStore.load({
                params: { regionId: '@Model.RegionId' },
            });
            regionCombobox.setValue('@Model.RegionId');
        }
        else {
            window.feature.districtStore.load({
                params: { regionId: '@Guid.Empty' },

            });
            regionCombobox.setValue('@Guid.Empty');
        }
        if ('@Model.DistrictId' != '' && '@Model.DistrictId' != '@Guid.Empty') {
            window.feature.outpostStore.load({
                params: { districtId: '@Model.DistrictId' },
            });
            districtCombobox.setValue('@Model.DistrictId');
        }
        else {
            window.feature.outpostStore.load({
                params: { districtId: '@Guid.Empty' },
            });
            districtCombobox.setValue('@Guid.Empty');
        }

        if ('@Model.OutpostId' != '' && '@Model.OutpostId' != '@Guid.Empty') {
            outpostCombobox.setValue('@Model.OutpostId');
        }
        else {
            outpostCombobox.setValue('@Guid.Empty');
        }

        if ('@Model.StartDate' != '') {
            startDataCtrl.setValue('@Model.StartDate');
        }
        if ('@Model.EndDate' != '' ) {
            endDataCtrl.setValue('@Model.EndDate');
        }

        if ('@Model.Client' != '') {
            var clientCombobox = window.feature.container.down('#' + window.feature.clientComboboxId);
            clientCombobox.setValue('@Model.Client');
        }

        window.feature.executeDelayed.delay(6000);
        
       
    });
</script>

